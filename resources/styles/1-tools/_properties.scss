/// Define the key for the default value.
///
/// @type String
///
/// @example scss
///   $properties-default-key: 'my-default-key';
///
///   .is-size-h1 {
///     @include properties((
///       line-height: 1.25,
///       font-size: (
///         'my-default-key': 20px,
///         'medium': 32px,
///       )
///     ))
///   }
///
///   // .is-size-h1 {
///   //   line-height: 1.25;
///   //   font-size: 20px;
///   // }
///   //
///   // @media (min-width: 768px) {
///   //   .is-size-h1 {
///   //     font-size: 32px;
///   //   }
///   // }

$properties-default-key: 'default' !default;


/// Generate responsive properties.
///
/// @param {Arglist} $args - Either a map of properties or a key value pair.
///
/// @example scss
///   .is-size-h1 {
///     // Using a map of properties.
///     @include properties((
///       line-height: 1.25,
///       font-size: (
///         'default': 20px,
///         'medium': 32px,
///         1500px: 60px
///       )
///     ))
///   }
///
///   // .is-size-h1 {
///   //   line-height: 1.25;
///   //   font-size: 20px;
///   // }
///   //
///   // @media (min-width: 768px) {
///   //   .is-size-h1 {
///   //     font-size: 32px;
///   //   }
///   // }
///   //
///   // @media (min-width: 1500px) {
///   //   .is-size-h1 {
///   //     font-size: 60px;
///   //   }
///   // }
///
///   .is-size-h1 {
///     line-height: 1.25;
///
///     // Using a key and value pair.
///     @include properties(font-size, (
///       'default': 20px,
///       'medium': 32px,
///       1500px: 60px
///     ))
///   }

@mixin properties($args...) {
  $cache: ();
  $data: nth($args, 1);

  // Normalize data
  @if type-of($data) == 'string' {
    $data: ($data: nth($args, 2));
  }

  @each $property, $values in $data {

    // Normalize values
    @if not(type-of($values) == 'map') {
      $values: (#{$properties-default-key}: $values);
    }

    @each $key, $value in $values {

      // Group $property: $value by breakpoint
      @if not($key == $properties-default-key) {
        $cache: map-extend($cache, ($key: ($property: $value)), true);
      }

      // Just output the $property: $value
      @else {
        #{$property}: $value;
      }
    }
  }

  // Output all properties grouped by breakpoint
  @each $key, $values in $cache {
    @include breakpoint($key) {
      @each $property, $value in $values {
        #{$property}: $value;
      }
    }
  }
}
