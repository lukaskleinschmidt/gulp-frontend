/// Parse the value.
///
/// @param {Number | String} $value - Either a number or a string.
/// @return {Number | String} The parsed input.
@function __parse-format($value) {
  $type: type-of($value);

  // If the value is a number simply remove the unit
  @if $type == 'number' {
    @return strip-unit($value);
  }

  // Throw an error if the value is neither a number nor a string
  @if $type != 'string' {
    @error 'Value must be a number or string.';
  }

  // If the value starts with two dashes it is probably a custom property
  @if str-index($value, '--') {
    @return #{var($value)};
  }

  @return $value;
}


/// Pseudo element representing the chosen format.
///
/// @param {Number | String} $ratio - Either a ratio or a width.
/// @param {Number | String} $height [null] - Use width and height to calculate the ratio.
///
/// @example
///   .media {
///     // Using a ratio.
///     @include format(4/3);
///
///     // Using a width and a height.
///     @include format(400px, 300px);
///
///     // Using custom properties.
///     @include format(--width, --height);
///   }
@mixin format($ratio.../*, $height */) {

  // Calculate the ratio using a width and a height if a second parameter is
  // present
  @if length($ratio) > 1 {
    $ratio: calc(
      #{__parse-format(nth($ratio, 1))} /
      #{__parse-format(nth($ratio, 2))}
    );
  }

  // If there is no second parameter present we will assume that the given value
  // is a ratio
  @else {
    $ratio: __parse-format(nth($ratio, 1));
  }

  &::before {
    content: '';

    padding-top: calc(100% / #{$ratio});
    display: block;

    @content;
  }
}
