@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';


/// Transform each value in a list.
///
/// @param {List} $list - List to be transformed.
/// @param {Arglist} $pipes - List of functions.
/// @return {List} - Transformed list.
@function __pipe-list($list, $pipes...) {
  @for $i from 1 through list.length($list) {
    $value: pipe(nth($list, $i), $pipes...);
    $list: list.set-nth($list, $i, $value);
  }

  @return $list;
}


/// Transform each value in a map.
///
/// @param {Map} $map - Map to be transformed.
/// @param {Arglist} $pipes - List of functions.
/// @return {Map} - Transformed map.
@function __pipe-map($map, $pipes...) {
  @each $key, $value in $map {
    $value: pipe($value, $pipes...);
    $map: map.merge($map, ($key: $value));
  }

  @return $map;
}


/// Transform each value in a list or map.
///
/// @param {Mixed} $value - List or map to be transformed.
/// @param {Arglist} $pipes - List of functions.
/// @return {Mixed} - Transformed list or map.
@function pipe-each($value, $pipes...) {
  $type: meta.type-of($value);

  @if meta.function-exists('__pipe-#{$type}') {
    @return meta.call(meta.get-function('__pipe-#{$type}'), $value, $pipes...);
  }

  @error 'Unknown type for #{$value} (#{$type}).';
}


/// Transform a value.
///
/// @param {Mixed} $value - Value to be transformed.
/// @param {Arglist} $pipes - List of functions.
/// @return {Mixed} - Transformed value.
@function pipe($value, $pipes...) {
  @each $pipe in $pipes {
    $length: list.length($pipe);
    $args: list.append((), $value);
    $fn: list.nth($pipe, 1);

    // Append arguments
    @if $length > 1 {
      @for $i from 2 through $length {
        $args: list.append($args, list.nth($pipe, $i), comma);
      }
    }

    // Call the function with arguments
    @if meta.function-exists($fn) {
      $value: meta.call(meta.get-function($fn), $args...);
    }
  }

  @return $value;
}
