// TODO: Add description
@mixin set($key, $value) {
  @if not(global-variable-exists('GLOBAL_OPTIONS')) {
    /// Global variable to keep track of all options
    $GLOBAL_OPTIONS: () !global;
  }

  @if map-has-key($GLOBAL_OPTIONS, $key) {
    $current-value: map-get($GLOBAL_OPTIONS, $key);

    @if type-of($current-value) == 'map' and type-of($value) == 'map' {
      $value: map-merge($current-value, $value);
    }

    @else {
      @warn '"#{$key}" is overwritten with: "#{$value}".';
    }
  }

  $GLOBAL_OPTIONS: map-merge($GLOBAL_OPTIONS, ($key: $value)) !global;
}

// TODO: Add description
@mixin set-color($key, $value, $gradients: false, $config: ()) {
  @include set('color', ($key: $value));
  @if $gradients {
    @include set-color-gradients($key, $config);
  }
}

// TODO: Add description
@mixin set-color-gradients($key, $config: ()) {
  $color: null;
  $colors: get('color');

  // if $key is a color by itself and not in $colors return $key
  // otherwise get the color from $colors
  @if not(map-has-key($colors, $key)) {
    @warn '#{$key} is not in the color map.';
  }

  @else {
    $color: map-get($colors, $key);
  }

  // default config
  @if length($config) == 0 {
    $config: (
      (
        'suffix': 'light' 'lighter' 'lightest',
        'color': #fff,
      ),
      (
        'suffix': 'dark' 'darker' 'darkest',
        'color': #000,
      )
    );
  }

  @each $gradient in $config  {
    $gradient-suffix: map-get($gradient, 'suffix');
    $gradient-color: map-get($gradient, 'color');

    @if type-of($gradient-suffix) == 'list' and type-of($gradient-color) == 'color' {
      $length: length($gradient-suffix);

      @for $i from 1 through $length {
        $mix: mix($gradient-color, $color, percentage($i / ($length + 1)));
        @include set-color(#{$key + '-' + nth($gradient-suffix, $i)}, $mix);
      }
    }
  }
}

// TODO: Add description
@function get($keys...) {
  $map: $GLOBAL_OPTIONS;

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @if type-of($map) == 'string' {
    @return unquote($map);
  }

  @return $map;
}
