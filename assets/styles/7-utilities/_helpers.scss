.is-overflow-hidden {
  overflow: hidden;
}

// .is-overflow-visible {
//   overflow: visible;
// }
//
// .is-marginless {
//   margin: 0;
// }
//
// .is-paddingless {
//   padding: 0;
// }
//
// @include r((
//   'is-hidden': none,
//   'is-visible': block,
// )) {
//   display: value();
// }
//
// // creates some css that allows to
// // show nodes when a specific class
// // is set on a parent node
// //
// // <div class="is-open">
// //   <div data-is="open">
// //     <!-- will be visible -->
// //   </div>
// //   <div data-is="close">
// //     <!-- will be invisible -->
// //   </div>
// // </div>
//
// $is-duration: $duration * 2;
// $is-delay: $is-duration + $duration;
// $values: 'open' 'close';
//
// %is-visible {
//   transition-timing-function: $ease-out;
//   transition-delay: $is-delay;
//   transform: scale(1);
//   opacity: 1;
// }
//
// %is-invisible {
//   transition-timing-function: $ease-in;
//   transition-delay: 0ms;
//   transform: scale(0.75);
//   opacity: 0;
// }
//
// [data-is] {
//   @extend %is-invisible;
//
//   transition-duration: $is-duration;
//   transition-property: opacity, transform;
//   will-change: transform, opacity;
//   display: block;
//
//   &[data-is=""] {
//     @extend %is-visible;
//   }
// }
//
// @each $value in $values {
//   .is-#{$value} {
//     [data-is]:not([data-is~="#{$value}"]) {
//       @extend %is-invisible;
//     }
//   }
// }
//
// @each $value in $values {
//   .is-#{$value} {
//     [data-is][data-is~="#{$value}"] {
//       @extend %is-visible;
//     }
//   }
// }
