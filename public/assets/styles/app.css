*,
::before,
::after {
  box-sizing: border-box;
}

body::after {
  content: '{"breakpoints": {"small": 32, "medium": 48, "large": 64, "largest": 80}}';
  display: none;
}

/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
       ========================================================================== */
/**
     * 1. Correct the line height in all browsers.
     * 2. Prevent adjustments of font size after orientation changes in
     *    IE on Windows Phone and in iOS.
     */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
       ========================================================================== */
/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0;
}

/**
     * Add the correct display in IE 9-.
     */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
figcaption,
figure {
  display: block;
}

/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1em 40px;
}

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
     * Add the correct display in IE.
     */
main {
  display: block;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit;
}

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
     * Add the correct font style in Android 4.3-.
     */
dfn {
  font-style: italic;
}

/**
     * Add the correct background and color in IE 9-.
     */
mark {
  background-color: #ff0;
  color: #000;
}

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%;
}

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
audio,
video {
  display: inline-block;
}

/**
     * Add the correct display in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
     * Remove the border on images inside links in IE 10-.
     */
img {
  border-style: none;
}

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
       ========================================================================== */
/**
     * 1. Change the font styles in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible;
}

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible;
}

/**
     * 1. Add the correct box sizing in IE 10-.
     * 2. Remove the padding in IE 10-.
     */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
       */
}

[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
     * Correct the padding in Firefox.
     */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
     * 1. Add the correct display in IE 9-.
     * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto;
}

/* Interactive
       ========================================================================== */
/*
     * Add the correct display in Edge, IE, and Firefox.
     */
details {
  display: block;
}

/*
     * Add the correct display in all browsers.
     */
summary {
  display: list-item;
}

/*
     * Add the correct display in IE 9-.
     */
menu {
  display: block;
}

/* Scripting
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
canvas {
  display: inline-block;
}

/**
     * Add the correct display in IE.
     */
template {
  display: none;
}

/* Hidden
       ========================================================================== */
/**
     * Add the correct display in IE 10-.
     */
[hidden] {
  display: none;
}

:root {
  --primary: #328dc1;
  --black: #000000;
  --gray: #666666;
  --white: #ffffff;
  --family-default: Arial, Helvetica, sans-serif;
  --family-heading: Arial, Helvetica, sans-serif;
  --family-mono: monospace;
}

::selection {
  background-color: var(--selection-background, steelblue);
  color: var(--selection-color, white);
}

html,
body {
  font-family: var(--family-default);
}

html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  font-size: 62.5%;
}

body {
  line-height: 1.35;
  font-weight: 400;
  font-size: 1.6rem;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--family-heading);
  font-weight: 700;
  line-height: 1.4;
  margin: var(--margin, 2.5em 0 1.25em);
}

blockquote,
figure,
table,
dl,
hr,
ol,
ul,
p {
  margin: var(--margin, 1.25em 0);
}

.container {
  --container-margin-right: auto;
  --container-margin-left: auto;
  --container-padding: 20px;
  --container-width: 1200px;
}

@media (min-width: 48em) {
  .container {
    --container-padding: 40px;
  }
}

.container.--smallest {
  --container-width: 240px;
}

.container.--smaller {
  --container-width: 400px;
}

.container.--small {
  --container-width: 560px;
}

.container.--medium {
  --container-width: 720px;
}

.container.--large {
  --container-width: 880px;
}

.container.--larger {
  --container-width: 1040px;
}

.container.--left {
  --container-margin-left: 0px;
}

.container.--right {
  --container-margin-right: 0px;
}

.container.--collapsed {
  --container-padding: 0px;
}

.container {
  padding-right: var(--container-padding);
  padding-left: var(--container-padding);
  margin-right: var(--container-margin-right);
  margin-left: var(--container-margin-left);
}

.container:not(.--fullwidth) {
  max-width: calc(var(--container-width) + var(--container-padding) * 2);
}

.content {
  line-height: var(--line-height, 1.4);
  font-weight: var(--font-weight, 400);
  font-size: var(--font-size, 1.6rem);
}

.content:not(.--scope) > :first-child {
  margin-top: 0;
}

.content:not(.--scope) > :last-child {
  margin-bottom: 0;
}

.content small {
  display: inline-block;
}

.content h1 {
  line-height: var(--line-height, 1.3);
  font-weight: var(--font-weight, 700);
  font-size: var(--font-size, 2.8rem);
}

@media (min-width: 48em) {
  .content h1 {
    font-size: var(--font-size, 3.2rem);
  }
}

.content h2 {
  line-height: var(--line-height, 1.3);
  font-weight: var(--font-weight, 700);
  font-size: var(--font-size, 2rem);
}

@media (min-width: 48em) {
  .content h2 {
    font-size: var(--font-size, 2.4rem);
  }
}

.content h3 {
  line-height: var(--line-height, 1.3);
  font-weight: var(--font-weight, 700);
  font-size: var(--font-size, 1.8rem);
}

@media (min-width: 48em) {
  .content h3 {
    font-size: var(--font-size, 2rem);
  }
}

.content small {
  line-height: var(--line-height, 1.4);
  font-weight: var(--font-weight, 400);
  font-size: var(--font-size, 1.4rem);
}

.format {
  --format-height: 1;
  --format-width: 1;
  --format-ratio: calc(var(--format-width) / var(--format-height));
}

.format.\--3\/4, .format.--portrait {
  --format-height: 4;
  --format-width: 3;
}

.format.\--16\/9, .format.--landscape {
  --format-height: 9;
  --format-width: 16;
}

.format {
  position: relative;
  overflow: hidden;
}

.format::before {
  content: '';
  padding-top: calc(100% / var(--format-ratio));
  display: block;
  float: left;
}

.media {
  --media-position: center;
  --media-height: auto;
  --media-width: 100%;
  --media-fit: fill;
}

.media.--vertical {
  --media-height: 100%;
  --media-width: auto;
}

.media.--cover {
  --media-fit: cover;
}

.media.--contain {
  --media-fit: contain;
}

.media.--contain, .media.--cover {
  --media-height: 100%;
  --media-width: 100%;
}

.media {
  height: var(--media-height);
  width: var(--media-width);
}

.media picture,
.media canvas,
.media video,
.media img {
  object-position: var(--media-position);
  object-fit: var(--media-fit);
  max-height: 100%;
  max-width: 100%;
  display: block;
  height: var(--media-height);
  width: var(--media-width);
}

.display {
  --display-value: block;
  --display: none;
}

@media (min-width: 32em) {
  .display.--at-small {
    --display: var(--display-value);
  }
}

@media (min-width: 48em) {
  .display.--at-medium {
    --display: var(--display-value);
  }
}

@media (min-width: 64em) {
  .display.--at-large {
    --display: var(--display-value);
  }
}

@media (min-width: 80em) {
  .display.--at-largest {
    --display: var(--display-value);
  }
}

@media (max-width: 31.99em) {
  .display.--until-small {
    --display: var(--display-value);
  }
}

@media (max-width: 47.99em) {
  .display.--until-medium {
    --display: var(--display-value);
  }
}

@media (max-width: 63.99em) {
  .display.--until-large {
    --display: var(--display-value);
  }
}

@media (max-width: 79.99em) {
  .display.--until-largest {
    --display: var(--display-value);
  }
}

@media (min-width: 32em) and (max-width: 47.99em) {
  .display.--between-small-medium, .display.--between-small-and-medium {
    --display: var(--display-value);
  }
}

@media (min-width: 32em) and (max-width: 63.99em) {
  .display.--between-small-large, .display.--between-small-and-large {
    --display: var(--display-value);
  }
}

@media (min-width: 32em) and (max-width: 79.99em) {
  .display.--between-small-largest, .display.--between-small-and-largest {
    --display: var(--display-value);
  }
}

@media (min-width: 48em) and (max-width: 63.99em) {
  .display.--between-medium-large, .display.--between-medium-and-large {
    --display: var(--display-value);
  }
}

@media (min-width: 48em) and (max-width: 79.99em) {
  .display.--between-medium-largest, .display.--between-medium-and-largest {
    --display: var(--display-value);
  }
}

@media (min-width: 64em) and (max-width: 79.99em) {
  .display.--between-large-largest, .display.--between-large-and-largest {
    --display: var(--display-value);
  }
}

.display {
  display: var(--display);
}

.overflow-hidden {
  overflow: hidden;
}

.marginless {
  margin: 0;
}

.background-transparent {
  background-color: transparent;
}

.background-primary {
  background-color: var(--primary);
}

.background-black {
  background-color: var(--black);
}

.background-gray {
  background-color: var(--gray);
}

.background-white {
  background-color: var(--white);
}

.capitalized {
  text-transform: capitalize;
}

.lowercase {
  text-transform: lowercase;
}

.uppercase {
  text-transform: uppercase;
}

.italic {
  font-style: italic;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

.text-centered {
  text-align: center;
}

.text-justified {
  text-align: justify;
}

.text-nowrap {
  white-space: nowrap;
}

.text-h1 {
  line-height: var(--line-height, 1.3) !important;
  font-weight: var(--font-weight, 700) !important;
  font-size: var(--font-size, 2.8rem) !important;
}

@media (min-width: 48em) {
  .text-h1 {
    font-size: var(--font-size, 3.2rem) !important;
  }
}

.text-h2 {
  line-height: var(--line-height, 1.3) !important;
  font-weight: var(--font-weight, 700) !important;
  font-size: var(--font-size, 2rem) !important;
}

@media (min-width: 48em) {
  .text-h2 {
    font-size: var(--font-size, 2.4rem) !important;
  }
}

.text-h3 {
  line-height: var(--line-height, 1.3) !important;
  font-weight: var(--font-weight, 700) !important;
  font-size: var(--font-size, 1.8rem) !important;
}

@media (min-width: 48em) {
  .text-h3 {
    font-size: var(--font-size, 2rem) !important;
  }
}

.text-default {
  line-height: var(--line-height, 1.4) !important;
  font-weight: var(--font-weight, 400) !important;
  font-size: var(--font-size, 1.6rem) !important;
}

.text-small {
  line-height: var(--line-height, 1.4) !important;
  font-weight: var(--font-weight, 400) !important;
  font-size: var(--font-size, 1.4rem) !important;
}

.text-primary {
  color: #328dc1 !important;
}

.text-black {
  color: #000000 !important;
}

.text-gray {
  color: #666666 !important;
}

.text-white {
  color: #ffffff !important;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
