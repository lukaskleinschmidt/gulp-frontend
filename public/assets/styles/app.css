:root {
  --primary: #34f2d6;
  --primary-invert: #000000;
  --dark: #000000;
  --gray: #666666;
  --light: #ffffff;
  --gap-small: 10px;
  --gap-normal: 20px;
  --gap-medium: 40px;
  --container-small: 530px;
  --container-normal: 620px;
  --container-medium: 710px;
  --container-large: 890px;
  --container-largest: 1200px;
  --size-1: 3rem;
  --size-2: 2.25rem;
  --size-3: 1.75rem;
  --size-4: 1.25rem;
  --size-5: 1rem;
  --size-6: 0.875rem;
  --line-height-1: 1.1;
  --line-height-2: 1.5;
  --weight-thin: 300;
  --weight-normal: 400;
  --weight-medium: 500;
  --weight-bold: 700;
  --family-heading: Arial, Helvetica, sans-serif;
  --family-normal: Arial, Helvetica, sans-serif;
  --family-mono: monospace;
  --radius: 5px;
  --radius-rounded: 290486px;
  --ease-in-out: cubic-bezier(0.645, 0.045, 0.355, 1);
  --ease-out: cubic-bezier(0.215, 0.61, 0.355, 1);
  --ease-in: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  --duration: 86ms;
}

:root {
  --primary: #34f2d6;
  --primary-invert: #000000;
  --dark: #000000;
  --gray: #666666;
  --light: #ffffff;
  --gap-small: 10px;
  --gap-normal: 20px;
  --gap-medium: 40px;
  --container-small: 530px;
  --container-normal: 620px;
  --container-medium: 710px;
  --container-large: 890px;
  --container-largest: 1200px;
  --size-1: 3rem;
  --size-2: 2.25rem;
  --size-3: 1.75rem;
  --size-4: 1.25rem;
  --size-5: 1rem;
  --size-6: 0.875rem;
  --line-height-1: 1.1;
  --line-height-2: 1.5;
  --weight-thin: 300;
  --weight-normal: 400;
  --weight-medium: 500;
  --weight-bold: 700;
  --family-heading: Arial, Helvetica, sans-serif;
  --family-normal: Arial, Helvetica, sans-serif;
  --family-mono: monospace;
}

/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
       ========================================================================== */
/**
     * 1. Correct the line height in all browsers.
     * 2. Prevent adjustments of font size after orientation changes in
     *    IE on Windows Phone and in iOS.
     */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
       ========================================================================== */
/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0;
}

/**
     * Add the correct display in IE 9-.
     */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
figcaption,
figure {
  display: block;
}

/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1em 40px;
}

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
     * Add the correct display in IE.
     */
main {
  display: block;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit;
}

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
     * Add the correct font style in Android 4.3-.
     */
dfn {
  font-style: italic;
}

/**
     * Add the correct background and color in IE 9-.
     */
mark {
  background-color: #ff0;
  color: #000;
}

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%;
}

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
audio,
video {
  display: inline-block;
}

/**
     * Add the correct display in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
     * Remove the border on images inside links in IE 10-.
     */
img {
  border-style: none;
}

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
       ========================================================================== */
/**
     * 1. Change the font styles in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible;
}

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible;
}

/**
     * 1. Add the correct box sizing in IE 10-.
     * 2. Remove the padding in IE 10-.
     */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
       */
}

[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
     * Correct the padding in Firefox.
     */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
     * 1. Add the correct display in IE 9-.
     * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto;
}

/* Interactive
       ========================================================================== */
/*
     * Add the correct display in Edge, IE, and Firefox.
     */
details {
  display: block;
}

/*
     * Add the correct display in all browsers.
     */
summary {
  display: list-item;
}

/*
     * Add the correct display in IE 9-.
     */
menu {
  display: block;
}

/* Scripting
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
canvas {
  display: inline-block;
}

/**
     * Add the correct display in IE.
     */
template {
  display: none;
}

/* Hidden
       ========================================================================== */
/**
     * Add the correct display in IE 10-.
     */
[hidden] {
  display: none;
}

body {
  text-rendering: optimizeLegibility;
  font-family: var(--family-normal);
  font-weight: var(--weight-normal);
  line-height: var(--line-height-2);
  font-size: var(--size-5);
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--family-heading);
  font-weight: var(--weight-medium);
  margin: 3rem 0 1.125rem;
}

small {
  font-size: var(--size-6);
}

strong,
b {
  font-weight: var(--weight-bold);
}

blockquote,
figure,
ul,
ol,
p {
  margin: 1.125rem 0;
}

hr {
  background: currentColor;
  margin: 1.75rem 0;
  height: 1px;
  border: none;
}

::-moz-selection {
  background: var(--primary);
  color: var(--primary-invert);
}

::selection {
  background: var(--primary);
  color: var(--primary-invert);
}

img {
  max-width: 100%;
  height: auto;
}

blockquote {
  padding: 0;
}

.column {
  --column-width: auto;
  --column-flex: 1 1 0;
}

.column {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  display: block;
  width: var(--column-width);
  -webkit-box-flex: var(--column-flex);
      -ms-flex: var(--column-flex);
          flex: var(--column-flex);
}

.column.is-three-quarters {
  --column-width: 75%;
  --column-flex: none;
}

.column.is-two-thirds {
  --column-width: 66.66667%;
  --column-flex: none;
}

.column.is-half {
  --column-width: 50%;
  --column-flex: none;
}

.column.is-one-third {
  --column-width: 33.33333%;
  --column-flex: none;
}

.column.is-one-quarter {
  --column-width: 25%;
  --column-flex: none;
}

.column.is-four-fifths {
  --column-width: 80%;
  --column-flex: none;
}

.column.is-three-fifths {
  --column-width: 60%;
  --column-flex: none;
}

.column.is-two-fifths {
  --column-width: 40%;
  --column-flex: none;
}

.column.is-one-fifth {
  --column-width: 20%;
  --column-flex: none;
}

.column.is-fullwidth {
  --column-width: 100%;
  --column-flex: none;
}

.column.is-1 {
  --column-width: 8.33333%;
  --column-flex: none;
}

.column.is-2 {
  --column-width: 16.66667%;
  --column-flex: none;
}

.column.is-3 {
  --column-width: 25%;
  --column-flex: none;
}

.column.is-4 {
  --column-width: 33.33333%;
  --column-flex: none;
}

.column.is-5 {
  --column-width: 41.66667%;
  --column-flex: none;
}

.column.is-6 {
  --column-width: 50%;
  --column-flex: none;
}

.column.is-7 {
  --column-width: 58.33333%;
  --column-flex: none;
}

.column.is-8 {
  --column-width: 66.66667%;
  --column-flex: none;
}

.column.is-9 {
  --column-width: 75%;
  --column-flex: none;
}

.column.is-10 {
  --column-width: 83.33333%;
  --column-flex: none;
}

.column.is-11 {
  --column-width: 91.66667%;
  --column-flex: none;
}

.column.is-12 {
  --column-width: 100%;
  --column-flex: none;
}

.column.is-narrow {
  --column-flex: none;
}

.columns {
  --columns-gap: 0px;
  --columns-gap-horizontal: var(--columns-gap);
  --columns-gap-vertical: var(--columns-gap);
  --columns-separator-color: currentColor;
  --columns-separator-stroke: 1px;
  --columns-separator-stroke-horizontal: var(--columns-separator-stroke);
  --columns-separator-stroke-vertical: var(--columns-separator-stroke);
  --columns-separator-offset: 0px;
  --columns-separator-offset-horizontal: var(--columns-separator-offset);
  --columns-separator-offset-vertical: var(--columns-separator-offset);
}

.columns {
  margin-left: calc(-1 * var(--columns-gap-horizontal));
  margin-top: calc(-1 * var(--columns-gap-vertical));
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.columns > .column:not(:empty) {
  padding-left: var(--columns-gap-horizontal);
  padding-top: var(--columns-gap-vertical);
}

.columns.is-multiline {
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
}

.columns.is-inline {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.columns.has-gap-small {
  --columns-gap: var(--gap-small);
}

.columns.has-gap-normal {
  --columns-gap: var(--gap-normal);
}

.columns.has-gap-medium {
  --columns-gap: var(--gap-medium);
}

.columns.has-separator > .column {
  position: relative;
}

.columns.has-separator > .column::before, .columns.has-separator > .column::after {
  content: '';
  background: var(--columns-separator-color);
  position: absolute;
  display: block;
}

.columns.has-separator > .column::before {
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%);
  height: calc(100% - var(--columns-gap-vertical) - var(--columns-separator-offset-vertical) * 2);
  width: var(--columns-separator-stroke-vertical);
  left: calc(var(--columns-gap-horizontal) / 2);
  top: calc(var(--columns-gap-vertical) + var(--columns-separator-offset-vertical));
}

.columns.has-separator > .column::after {
  -webkit-transform: translateY(-50%);
          transform: translateY(-50%);
  height: var(--columns-separator-stroke-horizontal);
  width: calc(100% - var(--columns-gap-horizontal) - var(--columns-separator-offset-horizontal) * 2);
  left: calc(var(--columns-gap-horizontal) + var(--columns-separator-offset-horizontal));
  top: calc(var(--columns-gap-vertical) / 2);
}

.container {
  --container-padding: var(--gap-normal);
  --container-width: var(--container-largest);
}

.container {
  margin-right: auto;
  margin-left: auto;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  max-width: var(--container-width);
}

.container:not(.is-collapsed) {
  padding-right: var(--container-padding);
  padding-left: var(--container-padding);
  max-width: calc(var(--container-width) + var(--container-padding) * 2);
}

.container.is-small {
  --container-width: var(--container-small);
}

.container.is-normal {
  --container-width: var(--container-normal);
}

.container.is-medium {
  --container-width: var(--container-medium);
}

.container.is-large {
  --container-width: var(--container-large);
}

.container.is-largest {
  --container-width: var(--container-largest);
}

@media (min-width: 768px) {
  .container {
    --container-padding: var(--gap-medium);
  }
}

.is-overflow-hidden {
  overflow: hidden;
}

.is-marginless {
  margin: 0;
}

.is-capitalized {
  text-transform: capitalize;
}

.is-lowercase {
  text-transform: lowercase;
}

.is-uppercase {
  text-transform: uppercase;
}

.is-italic {
  font-style: italic;
}

.has-text-left {
  text-align: left;
}

.has-text-right {
  text-align: right;
}

.has-text-centered {
  text-align: center;
}

.has-text-justified {
  text-align: justify;
}

.is-size-h1 {
  line-height: var(--line-height-1);
  font-weight: var(--weight-medium);
  font-size: var(--size-2);
}

@media (min-width: 768px) {
  .is-size-h1 {
    font-size: var(--size-1);
  }
}

.is-size-h2 {
  line-height: var(--line-height-1);
  font-weight: var(--weight-medium);
  font-size: var(--size-3);
}

@media (min-width: 768px) {
  .is-size-h2 {
    font-size: var(--size-2);
  }
}

.is-size-h2 {
  line-height: var(--line-height-1);
  font-weight: var(--weight-medium);
  font-size: var(--size-4);
}

@media (min-width: 768px) {
  .is-size-h2 {
    font-size: var(--size-3);
  }
}

.is-size-normal {
  line-height: var(--line-height-2);
  font-weight: var(--weight-normal);
  font-size: var(--size-5);
}

.is-size-small {
  line-height: var(--line-height-2);
  font-weight: var(--weight-normal);
  font-size: var(--size-6);
}

.has-text-primary {
  color: #34f2d6;
}

.has-text-primary-invert {
  color: #000000;
}

.has-text-dark {
  color: #000000;
}

.has-text-gray {
  color: #666666;
}

.has-text-light {
  color: #ffffff;
}

.has-text-thin {
  font-weight: 300;
}

.has-text-normal {
  font-weight: 400;
}

.has-text-medium {
  font-weight: 500;
}

.has-text-bold {
  font-weight: 700;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
