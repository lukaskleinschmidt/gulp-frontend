:root {
  --primary: #34f2d6;
  --primary-invert: #000000;
  --dark: #000000;
  --gray: #666666;
  --light: #ffffff;
  --container-small: 530px;
  --container-normal: 620px;
  --container-medium: 710px;
  --container-large: 890px;
  --container-largest: 1200px;
  --size-1: 4.8rem;
  --size-2: 3.6rem;
  --size-3: 2.8rem;
  --size-4: 2rem;
  --size-5: 1.6rem;
  --size-6: 1.4rem;
  --line-height-1: 1.1;
  --line-height-2: 1.5;
  --weight-thin: 300;
  --weight-normal: 400;
  --weight-medium: 500;
  --weight-bold: 700;
  --family-heading: Arial, Helvetica, sans-serif;
  --family-normal: Arial, Helvetica, sans-serif;
  --family-mono: monospace;
  --radius: 5px;
  --radius-rounded: 290486px;
  --ease-in-out: cubic-bezier(0.645, 0.045, 0.355, 1);
  --ease-out: cubic-bezier(0.215, 0.61, 0.355, 1);
  --ease-in: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  --duration: 86ms;
}

/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
       ========================================================================== */
/**
     * 1. Correct the line height in all browsers.
     * 2. Prevent adjustments of font size after orientation changes in
     *    IE on Windows Phone and in iOS.
     */
html {
  font-size: 62.5%;
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
       ========================================================================== */
/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0;
}

/**
     * Add the correct display in IE 9-.
     */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
figcaption,
figure {
  display: block;
}

/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1em 40px;
}

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
     * Add the correct display in IE.
     */
main {
  display: block;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit;
}

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
     * Add the correct font style in Android 4.3-.
     */
dfn {
  font-style: italic;
}

/**
     * Add the correct background and color in IE 9-.
     */
mark {
  background-color: #ff0;
  color: #000;
}

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%;
}

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
audio,
video {
  display: inline-block;
}

/**
     * Add the correct display in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
     * Remove the border on images inside links in IE 10-.
     */
img {
  border-style: none;
}

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
       ========================================================================== */
/**
     * 1. Change the font styles in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible;
}

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible;
}

/**
     * 1. Add the correct box sizing in IE 10-.
     * 2. Remove the padding in IE 10-.
     */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
       */
}

[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
     * Correct the padding in Firefox.
     */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
     * 1. Add the correct display in IE 9-.
     * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto;
}

/* Interactive
       ========================================================================== */
/*
     * Add the correct display in Edge, IE, and Firefox.
     */
details {
  display: block;
}

/*
     * Add the correct display in all browsers.
     */
summary {
  display: list-item;
}

/*
     * Add the correct display in IE 9-.
     */
menu {
  display: block;
}

/* Scripting
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
canvas {
  display: inline-block;
}

/**
     * Add the correct display in IE.
     */
template {
  display: none;
}

/* Hidden
       ========================================================================== */
/**
     * Add the correct display in IE 10-.
     */
[hidden] {
  display: none;
}

html,
body {
  font-family: var(--family-normal);
  font-weight: var(--weight-normal);
  line-height: var(--line-height-2);
  font-size: var(--size-5);
}

html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  position: relative;
  font-size: 62.5%;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--family-heading);
  font-weight: var(--weight-medium);
  margin: 3rem 0 1.125rem;
}

small {
  font-size: var(--size-6);
}

strong,
b {
  font-weight: var(--weight-bold);
}

blockquote,
figure,
ul,
ol,
p {
  margin: 1.125rem 0;
}

hr {
  background: currentColor;
  margin: 1.75rem 0;
  height: 1px;
  border: none;
}

::-moz-selection {
  background: var(--primary);
  color: var(--primary-invert);
}

::selection {
  background: var(--primary);
  color: var(--primary-invert);
}

img {
  max-width: 100%;
  height: auto;
}

blockquote {
  padding: 0;
}

.column {
  --column-width: auto;
  --column-flex: 0 0 0;
}

.column.is-narrow {
  --column-flex: none;
}

.column.is-three-quarters {
  --column-width: 75%;
  --column-flex: none;
}

.column.is-two-thirds {
  --column-width: 66.66667%;
  --column-flex: none;
}

.column.is-half {
  --column-width: 50%;
  --column-flex: none;
}

.column.is-one-third {
  --column-width: 33.33333%;
  --column-flex: none;
}

.column.is-one-quarter {
  --column-width: 25%;
  --column-flex: none;
}

.column.is-four-fifths {
  --column-width: 80%;
  --column-flex: none;
}

.column.is-three-fifths {
  --column-width: 60%;
  --column-flex: none;
}

.column.is-two-fifths {
  --column-width: 40%;
  --column-flex: none;
}

.column.is-one-fifth {
  --column-width: 20%;
  --column-flex: none;
}

.column.is-fullwidth {
  --column-width: 100%;
  --column-flex: none;
}

.column {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  display: block;
  width: var(--column-width);
  -webkit-box-flex: var(--column-flex);
      -ms-flex: var(--column-flex);
          flex: var(--column-flex);
}

.columns {
  --columns-gap: 0px;
  --columns-gap-horizontal: var(--columns-gap);
  --columns-gap-vertical: var(--columns-gap);
}

.columns {
  margin-left: calc(-1 * var(--columns-gap-horizontal));
  margin-top: calc(-1 * var(--columns-gap-vertical));
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.columns > .column:not(:empty) {
  padding-left: var(--columns-gap-horizontal);
  padding-top: var(--columns-gap-vertical);
}

.columns.is-multiline {
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
}

.columns.is-inline {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.container {
  --container-margin-right: auto;
  --container-margin-left: auto;
  --container-padding: 20px;
  --container-width: var(--container-largest);
}

@media (min-width: 48em) {
  .container {
    --container-padding: 40px;
  }
}

.container.is-small {
  --container-width: var(--container-small);
}

.container.is-normal {
  --container-width: var(--container-normal);
}

.container.is-medium {
  --container-width: var(--container-medium);
}

.container.is-large {
  --container-width: var(--container-large);
}

.container.is-left {
  --container-margin-left: 0px;
}

.container.is-right {
  --container-margin-right: 0px;
}

.container {
  margin-right: var(--container-margin-right);
  margin-left: var(--container-margin-left);
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  max-width: var(--container-width);
}

.container:not(.is-collapsed) {
  padding-right: var(--container-padding);
  padding-left: var(--container-padding);
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
}

.media {
  --media-position: center;
  --media-height: auto;
  --media-width: 100%;
  --media-size: fill;
}

.media.is-vertical {
  --media-height: 100%;
  --media-width: auto;
}

.media.is-contain {
  --media-size: contain;
}

.media.is-cover {
  --media-size: cover;
}

.media.is-contain, .media.is-cover {
  --media-height: 100%;
  --media-width: 100%;
}

.media {
  height: var(--media-height);
  width: var(--media-width);
}

.media picture,
.media video,
.media img {
  -o-object-position: var(--media-position);
     object-position: var(--media-position);
  -o-object-fit: var(--media-size);
     object-fit: var(--media-size);
  max-height: 100%;
  max-width: 100%;
  display: block;
  height: var(--media-height);
  width: var(--media-width);
}

.is-overflow-hidden {
  overflow: hidden;
}

.is-marginless {
  margin: 0;
}

.is-capitalized {
  text-transform: capitalize;
}

.is-lowercase {
  text-transform: lowercase;
}

.is-uppercase {
  text-transform: uppercase;
}

.is-italic {
  font-style: italic;
}

.has-text-left {
  text-align: left;
}

.has-text-right {
  text-align: right;
}

.has-text-centered {
  text-align: center;
}

.has-text-justified {
  text-align: justify;
}

.is-size-h1 {
  line-height: var(--line-height-1) !important;
  font-weight: var(--weight-medium) !important;
  font-size: var(--size-2) !important;
}

@media (min-width: 48em) {
  .is-size-h1 {
    font-size: var(--size-1) !important;
  }
}

.is-size-h2 {
  line-height: var(--line-height-1) !important;
  font-weight: var(--weight-medium) !important;
  font-size: var(--size-3) !important;
}

@media (min-width: 48em) {
  .is-size-h2 {
    font-size: var(--size-2) !important;
  }
}

.is-size-h3 {
  line-height: var(--line-height-1) !important;
  font-weight: var(--weight-medium) !important;
  font-size: var(--size-4) !important;
}

@media (min-width: 48em) {
  .is-size-h3 {
    font-size: var(--size-3) !important;
  }
}

.is-size-normal {
  line-height: var(--line-height-2) !important;
  font-weight: var(--weight-normal) !important;
  font-size: var(--size-5) !important;
}

.is-size-small {
  line-height: var(--line-height-2) !important;
  font-weight: var(--weight-normal) !important;
  font-size: var(--size-6) !important;
}

.has-text-primary {
  color: #34f2d6 !important;
}

.has-text-primary-invert {
  color: #000000 !important;
}

.has-text-dark {
  color: #000000 !important;
}

.has-text-gray {
  color: #666666 !important;
}

.has-text-light {
  color: #ffffff !important;
}

.has-text-thin {
  font-weight: 300 !important;
}

.has-text-normal {
  font-weight: 400 !important;
}

.has-text-medium {
  font-weight: 500 !important;
}

.has-text-bold {
  font-weight: 700 !important;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjItb3B0aW9ucy9fdmFyaWFibGVzLnNjc3MiLCIxLXRvb2xzL192YXJpYWJsZXMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtc2Nzcy9zYXNzL25vcm1hbGl6ZS9fbm9ybWFsaXplLW1peGluLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXNjc3Mvc2Fzcy9ub3JtYWxpemUvX3ZlcnRpY2FsLXJoeXRobS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS1zY3NzL3Nhc3Mvbm9ybWFsaXplL192YXJpYWJsZXMuc2NzcyIsImFwcC5jc3MiLCI0LWVsZW1lbnRzL19lbGVtZW50cy5zY3NzIiwiNS1vYmplY3RzL19jb2x1bW4uc2NzcyIsIjUtb2JqZWN0cy9fY29sdW1ucy5zY3NzIiwiNS1vYmplY3RzL19jb250YWluZXIuc2NzcyIsIjEtdG9vbHMvX2JyZWFrcG9pbnQuc2NzcyIsIjUtb2JqZWN0cy9fbWVkaWEuc2NzcyIsIjctdXRpbGl0aWVzL19oZWxwZXJzLnNjc3MiLCI3LXV0aWxpdGllcy9fdHlwby5zY3NzIiwiMS10b29scy9fcHJvcGVydGllcy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VDZ0RNLG1CQUFTO0VBQVQsMEJBQVM7RUFBVCxnQkFBUztFQUFULGdCQUFTO0VBQVQsaUJBQVM7RUFBVCx5QkFBUztFQUFULDBCQUFTO0VBQVQsMEJBQVM7RUFBVCx5QkFBUztFQUFULDRCQUFTO0VBQVQsaUJBQVM7RUFBVCxpQkFBUztFQUFULGlCQUFTO0VBQVQsZUFBUztFQUFULGlCQUFTO0VBQVQsaUJBQVM7RUFBVCxxQkFBUztFQUFULHFCQUFTO0VBQVQsbUJBQVM7RUFBVCxxQkFBUztFQUFULHFCQUFTO0VBQVQsbUJBQVM7RUFBVCwrQ0FBUztFQUFULDhDQUFTO0VBQVQseUJBQVM7RURTYixjQUFTO0VBQ1QsMkJBQWlCO0VBQ2pCLG9EQUFjO0VBQ2QsZ0RBQVc7RUFDWCxrREFBVTtF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QUEwQjtDQUMzQjs7QUFFRDtFQUNFLDBCQUF5QjtDQUMxQjs7QUFFRDtFQUNFLDBCQUF5QjtDQUMxQjs7QUFFRDtFQUNFLG1CQUFrQjtDQUNuQjs7QUFFRDtFQUNFLGlCQUFnQjtDQUNqQjs7QUFFRDtFQUNFLGtCQUFpQjtDQUNsQjs7QUFFRDtFQUNFLG1CQUFrQjtDQUNuQjs7QUFFRDtFQUNFLG9CQUFtQjtDQUNwQjs7QUFHQztFQzBDTSw2Q0FuQjJCO0VBbUIzQiw2Q0FuQjJCO0VBbUIzQixvQ0FuQjJCO0NEckJoQzs7QUg0Q0Q7RUc5Q0E7SUNtRE0sb0NBNUIyQjtHRHJCaEM7Q1JndkJGOztBUWx2QkM7RUMwQ00sNkNBbkIyQjtFQW1CM0IsNkNBbkIyQjtFQW1CM0Isb0NBbkIyQjtDRHJCaEM7O0FINENEO0VHOUNBO0lDbURNLG9DQTVCMkI7R0RyQmhDO0NSNHZCRjs7QVE5dkJDO0VDMENNLDZDQW5CMkI7RUFtQjNCLDZDQW5CMkI7RUFtQjNCLG9DQW5CMkI7Q0RyQmhDOztBSDRDRDtFRzlDQTtJQ21ETSxvQ0E1QjJCO0dEckJoQztDUnd3QkY7O0FRMXdCQztFQzBDTSw2Q0FuQjJCO0VBbUIzQiw2Q0FuQjJCO0VBbUIzQixvQ0FuQjJCO0NEckJoQzs7QUFGRDtFQzBDTSw2Q0FuQjJCO0VBbUIzQiw2Q0FuQjJCO0VBbUIzQixvQ0FuQjJCO0NEckJoQzs7QUFJRDtFQUNFLDBCQUF3QjtDQUN6Qjs7QUFGRDtFQUNFLDBCQUF3QjtDQUN6Qjs7QUFGRDtFQUNFLDBCQUF3QjtDQUN6Qjs7QUFGRDtFQUNFLDBCQUF3QjtDQUN6Qjs7QUFGRDtFQUNFLDBCQUF3QjtDQUN6Qjs7QUFJRDtFQUNFLDRCQUE4QjtDQUMvQjs7QUFGRDtFQUNFLDRCQUE4QjtDQUMvQjs7QUFGRDtFQUNFLDRCQUE4QjtDQUMvQjs7QUFGRDtFQUNFLDRCQUE4QjtDQUMvQiIsImZpbGUiOiJhcHAuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOnJvb3Qge1xuXG4gIC8vIGNvbG9yc1xyXG4gIEBpbmNsdWRlIHZhcmlhYmxlcygoXHJcbiAgICAtLXByaW1hcnk6ICMzNGYyZDYsXHJcbiAgICAtLXByaW1hcnktaW52ZXJ0OiAjMDAwMDAwLFxyXG4gICAgLS1kYXJrOiAjMDAwMDAwLFxyXG4gICAgLS1ncmF5OiAjNjY2NjY2LFxyXG4gICAgLS1saWdodDogI2ZmZmZmZlxyXG4gICksIGNvbG9yKVxyXG5cclxuXHJcbiAgLy8gY29udGFpbmVyIHdpZHRoc1xyXG4gIEBpbmNsdWRlIHZhcmlhYmxlcygoXHJcbiAgICAtLWNvbnRhaW5lci1zbWFsbDogNTMwcHgsXHJcbiAgICAtLWNvbnRhaW5lci1ub3JtYWw6IDYyMHB4LFxyXG4gICAgLS1jb250YWluZXItbWVkaXVtOiA3MTBweCxcclxuICAgIC0tY29udGFpbmVyLWxhcmdlOiA4OTBweCxcclxuICAgIC0tY29udGFpbmVyLWxhcmdlc3Q6IDEyMDBweFxyXG4gICksIGNvbnRhaW5lcilcclxuXHJcblxyXG4gIC8vIGZvbnQgc2l6ZXNcclxuICBAaW5jbHVkZSB2YXJpYWJsZXMoKFxyXG4gICAgLS1zaXplLTE6IHJlbSg0OHB4KSxcclxuICAgIC0tc2l6ZS0yOiByZW0oMzZweCksXHJcbiAgICAtLXNpemUtMzogcmVtKDI4cHgpLFxyXG4gICAgLS1zaXplLTQ6IHJlbSgyMHB4KSxcclxuICAgIC0tc2l6ZS01OiByZW0oMTZweCksXHJcbiAgICAtLXNpemUtNjogcmVtKDE0cHgpXHJcbiAgKSwgc2l6ZSlcclxuXHJcblxyXG4gIC8vIGxpbmUgaGVpZ2h0c1xyXG4gIEBpbmNsdWRlIHZhcmlhYmxlcygoXHJcbiAgICAtLWxpbmUtaGVpZ2h0LTE6IDEuMSxcclxuICAgIC0tbGluZS1oZWlnaHQtMjogMS41XHJcbiAgKSwgbGluZS1oZWlnaHQpXHJcblxyXG5cclxuICAvLyBmb250IHdlaWdodHNcclxuICBAaW5jbHVkZSB2YXJpYWJsZXMoKFxyXG4gICAgLS13ZWlnaHQtdGhpbjogMzAwLFxyXG4gICAgLS13ZWlnaHQtbm9ybWFsOiA0MDAsXHJcbiAgICAtLXdlaWdodC1tZWRpdW06IDUwMCxcclxuICAgIC0td2VpZ2h0LWJvbGQ6IDcwMFxyXG4gICksIHdlaWdodClcclxuXHJcblxyXG4gIC8vIGZvbnQgZmFtaWxpZXNcclxuICBAaW5jbHVkZSB2YXJpYWJsZXMoKFxyXG4gICAgLS1mYW1pbHktaGVhZGluZzogKEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYpLFxyXG4gICAgLS1mYW1pbHktbm9ybWFsOiAoQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZiksXHJcbiAgICAtLWZhbWlseS1tb25vOiBtb25vc3BhY2VcclxuICApLCBmYW1pbHkpXHJcblxuXG4gIC0tcmFkaXVzOiA1cHg7XHJcbiAgLS1yYWRpdXMtcm91bmRlZDogMjkwNDg2cHg7XHJcbiAgLS1lYXNlLWluLW91dDogY3ViaWMtYmV6aWVyKDAuNjQ1LCAwLjA0NSwgMC4zNTUsIDEpO1xyXG4gIC0tZWFzZS1vdXQ6IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xyXG4gIC0tZWFzZS1pbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgLS1kdXJhdGlvbjogODZtcztcclxufVxuIiwiLy8vIEdlbmVyYXRlIGN1c3RvbSBwcm9wZXJ0aWVzIHRoYXQgYXJlIGFsc28gYXZhaWxhYmxlIGluIFNDU1MuXG4vLy9cclxuLy8vIEBwYXJhbSB7TWFwfSAkdmFsdWVzIC0gTWFwIG9mIGN1c3RvbSBwcm9wZXJ0aWVzXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJGdyb3VwIC0gTmFtZSBvZiB0aGUgZ3JvdXBcclxuLy8vIEBleGFtcGxlXG4vLy9cclxuLy8vIDpyb290IHtcclxuLy8vICAgQGluY2x1ZGUgdmFyaWFibGVzKChcclxuLy8vICAgICAtLXNpemluZzogYm9yZGVyLWJveCxcclxuLy8vICAgKSk7XHJcbi8vL1xyXG4vLy8gICBAaW5jbHVkZSB2YXJpYWJsZXMoKFxyXG4vLy8gICAgIC0tcHJpbWFyeTogc3RlZWxibHVlLFxyXG4vLy8gICApLCBjb2xvcik7XHJcbi8vL1xyXG4vLy8gICBAaW5jbHVkZSB2YXJpYWJsZXMoKFxyXG4vLy8gICAgIC0tY29udGFpbmVyLXNtYWxsOiA3MTBweCxcclxuLy8vICAgICAtLWNvbnRhaW5lci1tZWRpdW06IDg5MHB4LFxyXG4vLy8gICApLCBjb250YWluZXIpO1xyXG4vLy8gfVxyXG4vLy9cclxuLy8vICRyZWdpc3RyeS1kYXRhOiAoXHJcbi8vLyAgIC0tc2l6aW5nOiBib3JkZXItYm94LFxyXG4vLy8gICAtLXByaW1hcnk6IHN0ZWVsYmx1ZSxcclxuLy8vICAgLS1jb250YWluZXItc21hbGw6IDcxMHB4LFxyXG4vLy8gICAtLWNvbnRhaW5lci1tZWRpdW06IDg5MHB4LFxyXG4vLy8gICBjb2xvcjogKFxyXG4vLy8gICAgIHByaW1hcnk6IHN0ZWVsYmx1ZVxyXG4vLy8gICApLFxyXG4vLy8gICBjb250YWluZXI6IChcclxuLy8vICAgICBzbWFsbDogNzEwcHgsXHJcbi8vLyAgICAgbWVkaXVtOiA4OTBweFxyXG4vLy8gICApLFxyXG4vLy8gKTtcclxuLy8vXHJcbi8vLyA6cm9vdCB7XHJcbi8vLyAgIC0tc2l6aW5nOiBib3JkZXItYm94O1xyXG4vLy8gICAtLXByaW1hcnk6IHN0ZWVsYmx1ZTtcclxuLy8vICAgLS1jb250YWluZXItc21hbGw6IDcxMHB4XHJcbi8vLyAgIC0tY29udGFpbmVyLW1lZGl1bTogODkwcHg7XHJcbi8vLyB9XG5cclxuQG1peGluIHZhcmlhYmxlcygkdmFsdWVzLCAkZ3JvdXA6IG51bGwpIHtcclxuXG4gIC8vIGNoZWNrIGlmIGEgc2VsZWN0b3IgaXMgcHJlc2VudFxyXG4gIC8vIGFuZCBvdXRwdXQgdGhlIGN1c3RvbSBwcm9wZXJ0aWVzXHJcbiAgQGlmICYge1xyXG4gICAgQGVhY2ggJGtleSwgJHZhbHVlIGluICR2YWx1ZXMge1xyXG4gICAgICAjeyRrZXl9OiAjeyR2YWx1ZX07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJHZhbHVlcyB7XG5cbiAgICAvLyByZWdpc3RlciB0aGUgY3VzdG9tIHByb3BlcnR5IGl0c2VsZlxyXG4gICAgQGluY2x1ZGUgc3RvcmUoJGtleSwgJHZhbHVlKTtcclxuXHJcbiAgICAka2V5OiB0cmltKCRrZXksICctJyk7XHJcblxyXG4gICAgLy8gd2hlbiBhIGdyb3VwIGlzIHN1cHBsaWVkIHRoZSBtaXhpbiB3aWxsIHRyeVxyXG4gICAgLy8gdG8gZ3JvdXAgdGhlIHZhcmlhYmxlcyB3aXRoIHRoZSBnaXZlbiBncm91cFxyXG4gICAgQGlmICRncm91cCB7XHJcbiAgICAgICRpbmRleDogc3RyLWluZGV4KCRrZXksICRncm91cCk7XG5cbiAgICAgIEBpZiAkaW5kZXgge1xuICAgICAgICAka2V5OiBzdHItc2xpY2UoJGtleSwgc3RyLWxlbmd0aCgkZ3JvdXApICsgMSk7XG4gICAgICB9XG5cbiAgICAgICRrZXk6IHRyaW0oJGtleSwgJy0nKTtcblxuICAgICAgLy8gbWFrZSB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mICRrZXkgbG93ZXJjYXNlXHJcbiAgICAgICRrZXk6IHRvLWxvd2VyLWNhc2Uoc3RyLXNsaWNlKCRrZXksIDEsIDEpKSArIHN0ci1zbGljZSgka2V5LCAyKTtcblxuICAgICAgQGluY2x1ZGUgc3RvcmUoJGdyb3VwLCAoJGtleTogJHZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSAkdmFsdWVcbiAgICAvLyB3aXRoIHRoZSBzbGljZWQgJGtleVxyXG4gICAgQGVsc2Uge1xyXG4gICAgICBAaW5jbHVkZSBzdG9yZSgka2V5LCAkdmFsdWUpO1xyXG4gICAgfVxuICB9XHJcbn1cclxuIiwiLy8gSGVscGVyIGZ1bmN0aW9uIGZvciB0aGUgbm9ybWFsaXplKCkgbWl4aW4uXG5AZnVuY3Rpb24gX25vcm1hbGl6ZS1pbmNsdWRlKCRzZWN0aW9uLCAkZXhjbHVkZTogbnVsbCkge1xuICAvLyBJbml0aWFsaXplIHRoZSBnbG9iYWwgdmFyaWFibGVzIG5lZWRlZCBieSB0aGlzIGZ1bmN0aW9uLlxuICBAaWYgbm90IGdsb2JhbF92YXJpYWJsZV9leGlzdHMoX25vcm1hbGl6ZS1pbmNsdWRlKSB7XG4gICAgJF9ub3JtYWxpemUtaW5jbHVkZTogKCkgIWdsb2JhbDtcbiAgICAkX25vcm1hbGl6ZS1leGNsdWRlOiAoKSAhZ2xvYmFsO1xuICB9XG4gIC8vIFNpbmNlIHdlIGFyZSBnaXZlbiAyIHBhcmFtZXRlcnMsIHNldCB0aGUgZ2xvYmFsIHZhcmlhYmxlcy5cbiAgQGlmICRleGNsdWRlICE9IG51bGwge1xuICAgICRpbmNsdWRlOiAkc2VjdGlvbjtcbiAgICAvLyBTYXNzIGRvZXNuJ3QgaGF2ZSBzdGF0aWMgdmFyaWFibGVzLCBzbyB0aGUgd29yay1hcm91bmQgaXMgdG8gc3R1ZmYgdGhlc2VcbiAgICAvLyB2YWx1ZXMgaW50byBnbG9iYWwgdmFyaWFibGVzIHNvIHdlIGNhbiBhY2Nlc3MgdGhlbSBpbiBmdXR1cmUgY2FsbHMuXG4gICAgJF9ub3JtYWxpemUtaW5jbHVkZTogaWYodHlwZS1vZigkaW5jbHVkZSkgPT0gJ2xpc3QnLCAkaW5jbHVkZSwgKCRpbmNsdWRlKSkgIWdsb2JhbDtcbiAgICAkX25vcm1hbGl6ZS1leGNsdWRlOiBpZih0eXBlLW9mKCRleGNsdWRlKSA9PSAnbGlzdCcsICRleGNsdWRlLCAoJGV4Y2x1ZGUpKSAhZ2xvYmFsO1xuICAgIEByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmICRzZWN0aW9uIGlzIGluIHRoZSAkaW5jbHVkZSBsaXN0LlxuICBAaWYgaW5kZXgoJF9ub3JtYWxpemUtaW5jbHVkZSwgJHNlY3Rpb24pIHtcbiAgICBAcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gSWYgJGluY2x1ZGUgaXMgc2V0IHRvIChhbGwpLCBtYWtlIHN1cmUgJHNlY3Rpb24gaXMgbm90IGluICRleGNsdWRlLlxuICBAZWxzZSBpZiBub3QgaW5kZXgoJF9ub3JtYWxpemUtZXhjbHVkZSwgJHNlY3Rpb24pIGFuZCBpbmRleCgkX25vcm1hbGl6ZS1pbmNsdWRlLCBhbGwpIHtcbiAgICBAcmV0dXJuIHRydWU7XG4gIH1cbiAgQHJldHVybiBmYWxzZTtcbn1cblxuQG1peGluIG5vcm1hbGl6ZSgkaW5jbHVkZTogKGFsbCksICRleGNsdWRlOiAoKSkge1xuICAvLyBJbml0aWFsaXplIHRoZSBoZWxwZXIgZnVuY3Rpb24gYnkgcGFzc2luZyBpdCB0aGlzIG1peGluJ3MgcGFyYW1ldGVycy5cbiAgJGluaXQ6IF9ub3JtYWxpemUtaW5jbHVkZSgkaW5jbHVkZSwgJGV4Y2x1ZGUpO1xuXG4gIC8vIElmIHdlJ3ZlIGN1c3RvbWl6ZWQgYW55IGZvbnQgdmFyaWFibGVzLCB3ZSdsbCBuZWVkIGV4dHJhIHByb3BlcnRpZXMuXG4gIEBpZiAkYmFzZS1saW5lLWhlaWdodCAhPSAyNHB4XG4gICAgb3IgJGJhc2UtdW5pdCAhPSAnZW0nXG4gICAgb3IgJGgyLWZvbnQtc2l6ZSAhPSAxLjUgICogJGJhc2UtZm9udC1zaXplXG4gICAgb3IgJGgzLWZvbnQtc2l6ZSAhPSAxLjE3ICogJGJhc2UtZm9udC1zaXplXG4gICAgb3IgJGg0LWZvbnQtc2l6ZSAhPSAxICAgICogJGJhc2UtZm9udC1zaXplXG4gICAgb3IgJGg1LWZvbnQtc2l6ZSAhPSAwLjgzICogJGJhc2UtZm9udC1zaXplXG4gICAgb3IgJGg2LWZvbnQtc2l6ZSAhPSAwLjY3ICogJGJhc2UtZm9udC1zaXplIHtcbiAgICAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobTogdHJ1ZSAhZ2xvYmFsO1xuICB9XG5cbiAgLyohIG5vcm1hbGl6ZS1zY3NzIHwgTUlUL0dQTHYyIExpY2Vuc2UgfCBiaXQubHkvbm9ybWFsaXplLXNjc3MgKi9cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGRvY3VtZW50KSB7XG4gICAgLyogRG9jdW1lbnRcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW5cbiAgICAgKiAgICBJRSBvbiBXaW5kb3dzIFBob25lIGFuZCBpbiBpT1MuXG4gICAgICovXG5cbiAgICBodG1sIHtcbiAgICAgIEBpZiAkYmFzZS1mb250LWZhbWlseSB7XG4gICAgICAgIC8qIENoYW5nZSB0aGUgZGVmYXVsdCBmb250IGZhbWlseSBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS4gKi9cbiAgICAgICAgZm9udC1mYW1pbHk6ICRiYXNlLWZvbnQtZmFtaWx5O1xuICAgICAgfVxuICAgICAgQGlmICRiYXNlLWZvbnQtc2l6ZSAhPSAxNnB4IG9yICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgICAgLy8gQ29ycmVjdCBvbGQgYnJvd3NlciBidWcgdGhhdCBwcmV2ZW50ZWQgYWNjZXNzaWJsZSByZXNpemluZyBvZiB0ZXh0XG4gICAgICAgIC8vIHdoZW4gcm9vdCBmb250LXNpemUgaXMgc2V0IHdpdGggcHggb3IgZW0uXG4gICAgICAgIGZvbnQtc2l6ZTogKCRiYXNlLWZvbnQtc2l6ZSAvIDE2cHgpICogMTAwJTtcbiAgICAgIH1cbiAgICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAoJGJhc2UtbGluZS1oZWlnaHQgLyAkYmFzZS1mb250LXNpemUpICogMWVtOyAvKiAxICovXG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXG4gICAgICB9XG4gICAgICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xuICAgICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShzZWN0aW9ucykge1xuICAgIC8qIFNlY3Rpb25zXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICAgICAqL1xuXG4gICAgYm9keSB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5cbiAgICBhcnRpY2xlLFxuICAgIGFzaWRlLFxuICAgIGZvb3RlcixcbiAgICBoZWFkZXIsXG4gICAgbmF2LFxuICAgIHNlY3Rpb24ge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ycmVjdCB0aGUgZm9udCBzaXplIGFuZCBtYXJnaW4gb24gYGgxYCBlbGVtZW50cyB3aXRoaW4gYHNlY3Rpb25gIGFuZFxuICAgICAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXG4gICAgICovXG5cbiAgICBoMSB7XG4gICAgICBAaW5jbHVkZSBub3JtYWxpemUtZm9udC1zaXplKCRoMS1mb250LXNpemUpO1xuICAgICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoMS1mb250LXNpemUpO1xuICAgICAgfVxuXG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICAvKiBTZXQgMSB1bml0IG9mIHZlcnRpY2FsIHJoeXRobSBvbiB0aGUgdG9wIGFuZCBib3R0b20gbWFyZ2lucy4gKi9cbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDAsICRoMS1mb250LXNpemUpO1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBtYXJnaW46IDAuNjdlbSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICBoMiB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1mb250LXNpemUoJGgyLWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1saW5lLWhlaWdodCgkaDItZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDAsICRoMi1mb250LXNpemUpO1xuICAgICAgfVxuXG4gICAgICBoMyB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1mb250LXNpemUoJGgzLWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1saW5lLWhlaWdodCgkaDMtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDAsICRoMy1mb250LXNpemUpO1xuICAgICAgfVxuXG4gICAgICBoNCB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1mb250LXNpemUoJGg0LWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1saW5lLWhlaWdodCgkaDQtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDAsICRoNC1mb250LXNpemUpO1xuICAgICAgfVxuXG4gICAgICBoNSB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1mb250LXNpemUoJGg1LWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1saW5lLWhlaWdodCgkaDUtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDAsICRoNS1mb250LXNpemUpO1xuICAgICAgfVxuXG4gICAgICBoNiB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1mb250LXNpemUoJGg2LWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1saW5lLWhlaWdodCgkaDYtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDAsICRoNi1mb250LXNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoZ3JvdXBpbmcpIHtcbiAgICAvKiBHcm91cGluZyBjb250ZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAvKipcbiAgICAgICAqIFNldCAxIHVuaXQgb2YgdmVydGljYWwgcmh5dGhtIG9uIHRoZSB0b3AgYW5kIGJvdHRvbSBtYXJnaW4uXG4gICAgICAgKi9cblxuICAgICAgYmxvY2txdW90ZSB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAkaW5kZW50LWFtb3VudCk7XG4gICAgICB9XG5cbiAgICAgIGRsLFxuICAgICAgb2wsXG4gICAgICB1bCB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBUdXJuIG9mZiBtYXJnaW5zIG9uIG5lc3RlZCBsaXN0cy5cbiAgICAgICAqL1xuXG4gICAgICBvbCxcbiAgICAgIHVsIHtcbiAgICAgICAgb2wsXG4gICAgICAgIHVsIHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGQge1xuICAgICAgICBtYXJnaW46IDAgMCAwICRpbmRlbnQtYW1vdW50O1xuICAgICAgfVxuXG4gICAgICBvbCxcbiAgICAgIHVsIHtcbiAgICAgICAgcGFkZGluZzogMCAwIDAgJGluZGVudC1hbW91bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5cbiAgICBmaWdjYXB0aW9uLFxuICAgIGZpZ3VyZSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgbWFyZ2luIGluIElFIDguXG4gICAgICovXG5cbiAgICBmaWd1cmUge1xuICAgICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxICRpbmRlbnQtYW1vdW50KTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgbWFyZ2luOiAxZW0gJGluZGVudC1hbW91bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gRmlyZWZveC5cbiAgICAgKiAyLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlIGFuZCBJRS5cbiAgICAgKi9cblxuICAgIGhyIHtcbiAgICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAxICovXG4gICAgICBoZWlnaHQ6IDA7IC8qIDEgKi9cbiAgICAgIG92ZXJmbG93OiB2aXNpYmxlOyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXG4gICAgICovXG5cbiAgICBtYWluIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cblxuICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAvKipcbiAgICAgICAqIFNldCAxIHVuaXQgb2YgdmVydGljYWwgcmh5dGhtIG9uIHRoZSB0b3AgYW5kIGJvdHRvbSBtYXJnaW4uXG4gICAgICAgKi9cblxuICAgICAgcCxcbiAgICAgIHByZSB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cblxuICAgIHByZSB7XG4gICAgICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cbiAgICAgIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShsaW5rcykge1xuICAgIC8qIExpbmtzXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qKlxuICAgICAqIDEuIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAgICAgKiAyLiBSZW1vdmUgZ2FwcyBpbiBsaW5rcyB1bmRlcmxpbmUgaW4gaU9TIDgrIGFuZCBTYWZhcmkgOCsuXG4gICAgICovXG5cbiAgICBhIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAvKiAxICovXG4gICAgICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOiBvYmplY3RzOyAvKiAyICovXG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZSh0ZXh0KSB7XG4gICAgLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIENocm9tZSA1Ny0gYW5kIEZpcmVmb3ggMzktLlxuICAgICAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gICAgICovXG5cbiAgICBhYmJyW3RpdGxlXSB7XG4gICAgICBib3JkZXItYm90dG9tOiBub25lOyAvKiAxICovXG4gICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgLyogMiAqL1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkOyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJldmVudCB0aGUgZHVwbGljYXRlIGFwcGxpY2F0aW9uIG9mIGBib2xkZXJgIGJ5IHRoZSBuZXh0IHJ1bGUgaW4gU2FmYXJpIDYuXG4gICAgICovXG5cbiAgICBiLFxuICAgIHN0cm9uZyB7XG4gICAgICBmb250LXdlaWdodDogaW5oZXJpdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxuICAgICAqL1xuXG4gICAgYixcbiAgICBzdHJvbmcge1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cblxuICAgIGNvZGUsXG4gICAga2JkLFxuICAgIHNhbXAge1xuICAgICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlOyAvKiAxICovXG4gICAgICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHN0eWxlIGluIEFuZHJvaWQgNC4zLS5cbiAgICAgKi9cblxuICAgIGRmbiB7XG4gICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGJhY2tncm91bmQgYW5kIGNvbG9yIGluIElFIDktLlxuICAgICAqL1xuXG4gICAgbWFyayB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwO1xuICAgICAgY29sb3I6ICMwMDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5cbiAgICBzbWFsbCB7XG4gICAgICBmb250LXNpemU6IDgwJTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBlbGVtZW50cyBmcm9tIGFmZmVjdGluZyB0aGUgbGluZSBoZWlnaHQgaW5cbiAgICAgKiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5cbiAgICBzdWIsXG4gICAgc3VwIHtcbiAgICAgIGZvbnQtc2l6ZTogNzUlO1xuICAgICAgbGluZS1oZWlnaHQ6IDA7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gICAgfVxuXG4gICAgc3ViIHtcbiAgICAgIGJvdHRvbTogLTAuMjVlbTtcbiAgICB9XG5cbiAgICBzdXAge1xuICAgICAgdG9wOiAtMC41ZW07XG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShlbWJlZGRlZCkge1xuICAgIC8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5cbiAgICBhdWRpbyxcbiAgICB2aWRlbyB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gaU9TIDQtNy5cbiAgICAgKi9cblxuICAgIGF1ZGlvOm5vdChbY29udHJvbHNdKSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgaGVpZ2h0OiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgYm9yZGVyIG9uIGltYWdlcyBpbnNpZGUgbGlua3MgaW4gSUUgMTAtLlxuICAgICAqL1xuXG4gICAgaW1nIHtcbiAgICAgIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAgICAgKi9cblxuICAgIHN2Zzpub3QoOnJvb3QpIHtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShmb3Jtcykge1xuICAgIC8qIEZvcm1zXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qKlxuICAgICAqIDEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICAgICAqL1xuXG4gICAgYnV0dG9uLFxuICAgIGlucHV0LFxuICAgIG9wdGdyb3VwLFxuICAgIHNlbGVjdCxcbiAgICB0ZXh0YXJlYSB7XG4gICAgICBmb250LWZhbWlseTogaWYoJGJhc2UtZm9udC1mYW1pbHksICRiYXNlLWZvbnQtZmFtaWx5LCBzYW5zLXNlcmlmKTsgLyogMSAqL1xuICAgICAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICBsaW5lLWhlaWdodDogKCRiYXNlLWxpbmUtaGVpZ2h0IC8gJGJhc2UtZm9udC1zaXplKSAqIDFlbTsgLyogMSAqL1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xuICAgICAgfVxuICAgICAgbWFyZ2luOiAwOyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gICAgICovXG5cbiAgICBidXR0b24ge1xuICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gICAgICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICAgICAqL1xuXG4gICAgYnV0dG9uLFxuICAgIHNlbGVjdCB7IC8qIDEgKi9cbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIFByZXZlbnQgYSBXZWJLaXQgYnVnIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYCBhbmQgYHZpZGVvYFxuICAgICAqICAgIGNvbnRyb2xzIGluIEFuZHJvaWQgNC5cbiAgICAgKiAyLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICAgICAqL1xuXG4gICAgYnV0dG9uLFxuICAgIGh0bWwgW3R5cGU9XCJidXR0b25cIl0sIC8qIDEgKi9cbiAgICBbdHlwZT1cInJlc2V0XCJdLFxuICAgIFt0eXBlPVwic3VibWl0XCJdIHtcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXG4gICAgfVxuXG4gICAgYnV0dG9uLFxuICAgIFt0eXBlPVwiYnV0dG9uXCJdLFxuICAgIFt0eXBlPVwicmVzZXRcIl0sXG4gICAgW3R5cGU9XCJzdWJtaXRcIl0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSB0aGUgaW5uZXIgYm9yZGVyIGFuZCBwYWRkaW5nIGluIEZpcmVmb3guXG4gICAgICAgKi9cblxuICAgICAgJjo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgICAgIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXG4gICAgICAgKi9cblxuICAgICAgJjotbW96LWZvY3VzcmluZyB7XG4gICAgICAgIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlLlxuICAgICAqL1xuXG4gICAgaW5wdXQge1xuICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAtLlxuICAgICAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC0uXG4gICAgICovXG5cbiAgICBbdHlwZT1cImNoZWNrYm94XCJdLFxuICAgIFt0eXBlPVwicmFkaW9cIl0ge1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICAgICAgcGFkZGluZzogMDsgLyogMiAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cbiAgICAgKi9cblxuICAgIFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuICAgIFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgICAgIGhlaWdodDogYXV0bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cbiAgICAgKiAyLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXG4gICAgICBvdXRsaW5lLW9mZnNldDogLTJweDsgLyogMiAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gICAgICAgKi9cblxuICAgICAgJjo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbiAgICAgICY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAgICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAgICAgKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXG4gICAgICovXG5cbiAgICA6Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXG4gICAgICBmb250OiBpbmhlcml0OyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ycmVjdCB0aGUgcGFkZGluZyBpbiBGaXJlZm94LlxuICAgICAqL1xuXG4gICAgZmllbGRzZXQge1xuICAgICAgcGFkZGluZzogMC4zNWVtIDAuNzVlbSAwLjYyNWVtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxuICAgICAqIDMuIFJlbW92ZSB0aGUgcGFkZGluZyBzbyBkZXZlbG9wZXJzIGFyZSBub3QgY2F1Z2h0IG91dCB3aGVuIHRoZXkgemVybyBvdXRcbiAgICAgKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cblxuICAgIGxlZ2VuZCB7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gICAgICBkaXNwbGF5OiB0YWJsZTsgLyogMSAqL1xuICAgICAgbWF4LXdpZHRoOiAxMDAlOyAvKiAxICovXG4gICAgICBwYWRkaW5nOiAwOyAvKiAzICovXG4gICAgICBjb2xvcjogaW5oZXJpdDsgLyogMiAqL1xuICAgICAgd2hpdGUtc3BhY2U6IG5vcm1hbDsgLyogMSAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqIDIuIEFkZCB0aGUgY29ycmVjdCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXG4gICAgICovXG5cbiAgICBwcm9ncmVzcyB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IC8qIDEgKi9cbiAgICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgLyogMiAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUuXG4gICAgICovXG5cbiAgICB0ZXh0YXJlYSB7XG4gICAgICBvdmVyZmxvdzogYXV0bztcbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGludGVyYWN0aXZlKSB7XG4gICAgLyogSW50ZXJhY3RpdmVcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSwgYW5kIEZpcmVmb3guXG4gICAgICovXG5cbiAgICBkZXRhaWxzIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuXG4gICAgc3VtbWFyeSB7XG4gICAgICBkaXNwbGF5OiBsaXN0LWl0ZW07XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIG1lbnUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAgIC8qXG4gICAgICAgICAqIDEuIFNldCAxIHVuaXQgb2YgdmVydGljYWwgcmh5dGhtIG9uIHRoZSB0b3AgYW5kIGJvdHRvbSBtYXJnaW4uXG4gICAgICAgICAqIDIuIFNldCBjb25zaXN0ZW50IHNwYWNlIGZvciB0aGUgbGlzdCBzdHlsZSBpbWFnZS5cbiAgICAgICAgICovXG5cbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDApOyAvKiAxICovXG4gICAgICAgIHBhZGRpbmc6IDAgMCAwICRpbmRlbnQtYW1vdW50OyAvKiAyICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFR1cm4gb2ZmIG1hcmdpbnMgb24gbmVzdGVkIGxpc3RzLlxuICAgICAgICAgKi9cblxuICAgICAgICBtZW51ICYsXG4gICAgICAgIG9sICYsXG4gICAgICAgIHVsICYge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoc2NyaXB0aW5nKSB7XG4gICAgLyogU2NyaXB0aW5nXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuXG4gICAgY2FudmFzIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cbiAgICAgKi9cblxuICAgIHRlbXBsYXRlIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShoaWRkZW4pIHtcbiAgICAvKiBIaWRkZW5cbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTAtLlxuICAgICAqL1xuXG4gICAgW2hpZGRlbl0ge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBWZXJ0aWNhbCBSaHl0aG1cbi8vXG4vLyBUaGlzIGlzIHRoZSBtaW5pbWFsIGFtb3VudCBvZiBjb2RlIG5lZWRlZCB0byBjcmVhdGUgdmVydGljYWwgcmh5dGhtIGluIG91clxuLy8gQ1NTLiBJZiB5b3UgYXJlIGxvb2tpbmcgZm9yIGEgcm9idXN0IHNvbHV0aW9uLCBsb29rIGF0IHRoZSBleGNlbGxlbnQgVHlwZXlcbi8vIGxpYnJhcnkuIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pwdGFyYW50by90eXBleVxuXG5AZnVuY3Rpb24gbm9ybWFsaXplLXJoeXRobSgkdmFsdWUsICRyZWxhdGl2ZS10bzogJGJhc2UtZm9udC1zaXplLCAkdW5pdDogJGJhc2UtdW5pdCkge1xuICBAaWYgdW5pdCgkdmFsdWUpICE9IHB4IHtcbiAgICBAZXJyb3IgXCJUaGUgbm9ybWFsaXplIHZlcnRpY2FsLXJoeXRobSBtb2R1bGUgb25seSBzdXBwb3J0cyBweCBpbnB1dHMuIFRoZSB0eXBleSBsaWJyYXJ5IGlzIGJldHRlci5cIjtcbiAgfVxuICBAaWYgJHVuaXQgPT0gcmVtIHtcbiAgICBAcmV0dXJuICgkdmFsdWUgLyAkYmFzZS1mb250LXNpemUpICogMXJlbTtcbiAgfVxuICBAZWxzZSBpZiAkdW5pdCA9PSBlbSB7XG4gICAgQHJldHVybiAoJHZhbHVlIC8gJHJlbGF0aXZlLXRvKSAqIDFlbTtcbiAgfVxuICBAZWxzZSB7IC8vICR1bml0ID09IHB4XG4gICAgQHJldHVybiAkdmFsdWU7XG4gIH1cbn1cblxuQG1peGluIG5vcm1hbGl6ZS1mb250LXNpemUoJHZhbHVlLCAkcmVsYXRpdmUtdG86ICRiYXNlLWZvbnQtc2l6ZSkge1xuICBAaWYgdW5pdCgkdmFsdWUpICE9ICdweCcge1xuICAgIEBlcnJvciBcIm5vcm1hbGl6ZS1mb250LXNpemUoKSBvbmx5IHN1cHBvcnRzIHB4IGlucHV0cy4gVGhlIHR5cGV5IGxpYnJhcnkgaXMgYmV0dGVyLlwiO1xuICB9XG4gIGZvbnQtc2l6ZTogbm9ybWFsaXplLXJoeXRobSgkdmFsdWUsICRyZWxhdGl2ZS10byk7XG59XG5cbkBtaXhpbiBub3JtYWxpemUtcmh5dGhtKCRwcm9wZXJ0eSwgJHZhbHVlcywgJHJlbGF0aXZlLXRvOiAkYmFzZS1mb250LXNpemUpIHtcbiAgJHZhbHVlLWxpc3Q6ICR2YWx1ZXM7XG4gICRzZXA6IHNwYWNlO1xuICBAaWYgdHlwZS1vZigkdmFsdWVzKSA9PSAnbGlzdCcge1xuICAgICRzZXA6IGxpc3Qtc2VwYXJhdG9yKCR2YWx1ZXMpO1xuICB9XG4gIEBlbHNlIHtcbiAgICAkdmFsdWUtbGlzdDogYXBwZW5kKCgpLCAkdmFsdWVzKTtcbiAgfVxuXG4gICRub3JtYWxpemVkLXZhbHVlczogKCk7XG4gIEBlYWNoICR2YWx1ZSBpbiAkdmFsdWUtbGlzdCB7XG4gICAgQGlmIHVuaXRsZXNzKCR2YWx1ZSkgYW5kICR2YWx1ZSAhPSAwIHtcbiAgICAgICR2YWx1ZTogJHZhbHVlICogbm9ybWFsaXplLXJoeXRobSgkYmFzZS1saW5lLWhlaWdodCwgJHJlbGF0aXZlLXRvKTtcbiAgICB9XG4gICAgJG5vcm1hbGl6ZWQtdmFsdWVzOiBhcHBlbmQoJG5vcm1hbGl6ZWQtdmFsdWVzLCAkdmFsdWUsICRzZXApO1xuICB9XG4gICN7JHByb3BlcnR5fTogJG5vcm1hbGl6ZWQtdmFsdWVzO1xufVxuXG5AbWl4aW4gbm9ybWFsaXplLW1hcmdpbigkdmFsdWVzLCAkcmVsYXRpdmUtdG86ICRiYXNlLWZvbnQtc2l6ZSkge1xuICBAaW5jbHVkZSBub3JtYWxpemUtcmh5dGhtKG1hcmdpbiwgJHZhbHVlcywgJHJlbGF0aXZlLXRvKTtcbn1cblxuQG1peGluIG5vcm1hbGl6ZS1saW5lLWhlaWdodCgkZm9udC1zaXplLCAkbWluLWxpbmUtcGFkZGluZzogMnB4KSB7XG4gICRsaW5lczogY2VpbCgkZm9udC1zaXplIC8gJGJhc2UtbGluZS1oZWlnaHQpO1xuICAvLyBJZiBsaW5lcyBhcmUgY3JhbXBlZCBpbmNsdWRlIHNvbWUgZXh0cmEgbGVhZGluZy5cbiAgQGlmICgkbGluZXMgKiAkYmFzZS1saW5lLWhlaWdodCAtICRmb250LXNpemUpIDwgKCRtaW4tbGluZS1wYWRkaW5nICogMikge1xuICAgICRsaW5lczogJGxpbmVzICsgMTtcbiAgfVxuICBAaW5jbHVkZSBub3JtYWxpemUtcmh5dGhtKGxpbmUtaGVpZ2h0LCAkbGluZXMsICRmb250LXNpemUpO1xufVxuIiwiLy9cbi8vIFZhcmlhYmxlc1xuLy9cbi8vIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgdmFsdWVzIGJ5IHNldHRpbmcgdGhlIHZhcmlhYmxlcyBpbiB5b3VyIFNhc3Ncbi8vIGJlZm9yZSBpbXBvcnRpbmcgdGhlIG5vcm1hbGl6ZS1zY3NzIGxpYnJhcnkuXG5cbi8vIFRoZSBmb250IHNpemUgc2V0IG9uIHRoZSByb290IGh0bWwgZWxlbWVudC5cbiRiYXNlLWZvbnQtc2l6ZTogMTZweCAhZGVmYXVsdDtcblxuLy8gVGhlIGJhc2UgbGluZSBoZWlnaHQgZGV0ZXJtaW5lcyB0aGUgYmFzaWMgdW5pdCBvZiB2ZXJ0aWNhbCByaHl0aG0uXG4kYmFzZS1saW5lLWhlaWdodDogMjRweCAhZGVmYXVsdDtcblxuLy8gVGhlIGxlbmd0aCB1bml0IGluIHdoaWNoIHRvIG91dHB1dCB2ZXJ0aWNhbCByaHl0aG0gdmFsdWVzLlxuLy8gU3VwcG9ydGVkIHZhbHVlczogcHgsIGVtLCByZW0uXG4kYmFzZS11bml0OiAnZW0nICFkZWZhdWx0O1xuXG4vLyBUaGUgZGVmYXVsdCBmb250IGZhbWlseS5cbiRiYXNlLWZvbnQtZmFtaWx5OiBudWxsICFkZWZhdWx0O1xuXG4vLyBUaGUgZm9udCBzaXplcyBmb3IgaDEtaDYuXG4kaDEtZm9udC1zaXplOiAyICAgICogJGJhc2UtZm9udC1zaXplICFkZWZhdWx0O1xuJGgyLWZvbnQtc2l6ZTogMS41ICAqICRiYXNlLWZvbnQtc2l6ZSAhZGVmYXVsdDtcbiRoMy1mb250LXNpemU6IDEuMTcgKiAkYmFzZS1mb250LXNpemUgIWRlZmF1bHQ7XG4kaDQtZm9udC1zaXplOiAxICAgICogJGJhc2UtZm9udC1zaXplICFkZWZhdWx0O1xuJGg1LWZvbnQtc2l6ZTogMC44MyAqICRiYXNlLWZvbnQtc2l6ZSAhZGVmYXVsdDtcbiRoNi1mb250LXNpemU6IDAuNjcgKiAkYmFzZS1mb250LXNpemUgIWRlZmF1bHQ7XG5cbi8vIFRoZSBhbW91bnQgbGlzdHMgYW5kIGJsb2NrcXVvdGVzIGFyZSBpbmRlbnRlZC5cbiRpbmRlbnQtYW1vdW50OiA0MHB4ICFkZWZhdWx0O1xuXG4vLyBUaGUgZm9sbG93aW5nIHZhcmlhYmxlIGNvbnRyb2xzIHdoZXRoZXIgbm9ybWFsaXplLXNjc3Mgd2lsbCBvdXRwdXRcbi8vIGZvbnQtc2l6ZXMsIGxpbmUtaGVpZ2h0cyBhbmQgYmxvY2stbGV2ZWwgdG9wL2JvdHRvbSBtYXJnaW5zIHRoYXQgZm9ybSBhIGJhc2ljXG4vLyB2ZXJ0aWNhbCByaHl0aG0gb24gdGhlIHBhZ2UsIHdoaWNoIGRpZmZlcnMgZnJvbSB0aGUgb3JpZ2luYWwgTm9ybWFsaXplLmNzcy5cbi8vIEhvd2V2ZXIsIGNoYW5naW5nIGFueSBvZiB0aGUgdmFyaWFibGVzIGFib3ZlIHdpbGwgY2F1c2Vcbi8vICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHRvIGJlIGF1dG9tYXRpY2FsbHkgc2V0IHRvIHRydWUuXG4kbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobTogZmFsc2UgIWRlZmF1bHQ7XG4iLCI6cm9vdCB7XG4gIC0tcHJpbWFyeTogIzM0ZjJkNjtcbiAgLS1wcmltYXJ5LWludmVydDogIzAwMDAwMDtcbiAgLS1kYXJrOiAjMDAwMDAwO1xuICAtLWdyYXk6ICM2NjY2NjY7XG4gIC0tbGlnaHQ6ICNmZmZmZmY7XG4gIC0tY29udGFpbmVyLXNtYWxsOiA1MzBweDtcbiAgLS1jb250YWluZXItbm9ybWFsOiA2MjBweDtcbiAgLS1jb250YWluZXItbWVkaXVtOiA3MTBweDtcbiAgLS1jb250YWluZXItbGFyZ2U6IDg5MHB4O1xuICAtLWNvbnRhaW5lci1sYXJnZXN0OiAxMjAwcHg7XG4gIC0tc2l6ZS0xOiA0LjhyZW07XG4gIC0tc2l6ZS0yOiAzLjZyZW07XG4gIC0tc2l6ZS0zOiAyLjhyZW07XG4gIC0tc2l6ZS00OiAycmVtO1xuICAtLXNpemUtNTogMS42cmVtO1xuICAtLXNpemUtNjogMS40cmVtO1xuICAtLWxpbmUtaGVpZ2h0LTE6IDEuMTtcbiAgLS1saW5lLWhlaWdodC0yOiAxLjU7XG4gIC0td2VpZ2h0LXRoaW46IDMwMDtcbiAgLS13ZWlnaHQtbm9ybWFsOiA0MDA7XG4gIC0td2VpZ2h0LW1lZGl1bTogNTAwO1xuICAtLXdlaWdodC1ib2xkOiA3MDA7XG4gIC0tZmFtaWx5LWhlYWRpbmc6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gIC0tZmFtaWx5LW5vcm1hbDogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcbiAgLS1mYW1pbHktbW9ubzogbW9ub3NwYWNlO1xuICAtLXJhZGl1czogNXB4O1xuICAtLXJhZGl1cy1yb3VuZGVkOiAyOTA0ODZweDtcbiAgLS1lYXNlLWluLW91dDogY3ViaWMtYmV6aWVyKDAuNjQ1LCAwLjA0NSwgMC4zNTUsIDEpO1xuICAtLWVhc2Utb3V0OiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcbiAgLS1lYXNlLWluOiBjdWJpYy1iZXppZXIoMC41NSwgMC4wNTUsIDAuNjc1LCAwLjE5KTtcbiAgLS1kdXJhdGlvbjogODZtcztcbn1cblxuLyohIG5vcm1hbGl6ZS1zY3NzIHwgTUlUL0dQTHYyIExpY2Vuc2UgfCBiaXQubHkvbm9ybWFsaXplLXNjc3MgKi9cbi8qIERvY3VtZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cbiAgICAgKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluXG4gICAgICogICAgSUUgb24gV2luZG93cyBQaG9uZSBhbmQgaW4gaU9TLlxuICAgICAqL1xuaHRtbCB7XG4gIGZvbnQtc2l6ZTogNjIuNSU7XG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xuICAvKiAxICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqL1xufVxuXG4vKiBTZWN0aW9uc1xuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICAgKiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAgICAgKi9cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuYXJ0aWNsZSxcbmFzaWRlLFxuZm9vdGVyLFxuaGVhZGVyLFxubmF2LFxuc2VjdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKipcbiAgICAgKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXG4gICAgICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7XG59XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5maWdjYXB0aW9uLFxuZmlndXJlIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBtYXJnaW4gaW4gSUUgOC5cbiAgICAgKi9cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7XG59XG5cbi8qKlxuICAgICAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gICAgICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXG4gICAgICovXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAvKiAxICovXG4gIGhlaWdodDogMDtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cbiAgICAgKi9cbm1haW4ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICAgKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5wcmUge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07XG4gIC8qIDIgKi9cbn1cblxuLyogTGlua3NcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogMS4gUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxuICAgICAqIDIuIFJlbW92ZSBnYXBzIGluIGxpbmtzIHVuZGVybGluZSBpbiBpT1MgOCsgYW5kIFNhZmFyaSA4Ky5cbiAgICAgKi9cbmEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLyogMSAqL1xuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOiBvYmplY3RzO1xuICAvKiAyICovXG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctIGFuZCBGaXJlZm94IDM5LS5cbiAgICAgKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxuICAgICAqL1xuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiBub25lO1xuICAvKiAxICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAvKiAyICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAgICAgKiBQcmV2ZW50IHRoZSBkdXBsaWNhdGUgYXBwbGljYXRpb24gb2YgYGJvbGRlcmAgYnkgdGhlIG5leHQgcnVsZSBpbiBTYWZhcmkgNi5cbiAgICAgKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogaW5oZXJpdDtcbn1cblxuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyO1xufVxuXG4vKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cbmNvZGUsXG5rYmQsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovXG59XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHN0eWxlIGluIEFuZHJvaWQgNC4zLS5cbiAgICAgKi9cbmRmbiB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cblxuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGJhY2tncm91bmQgYW5kIGNvbG9yIGluIElFIDktLlxuICAgICAqL1xubWFyayB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjA7XG4gIGNvbG9yOiAjMDAwO1xufVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7XG59XG5cbi8qKlxuICAgICAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICAgICAqIGFsbCBicm93c2Vycy5cbiAgICAgKi9cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5hdWRpbyxcbnZpZGVvIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBpT1MgNC03LlxuICAgICAqL1xuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwO1xufVxuXG4vKipcbiAgICAgKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLS5cbiAgICAgKi9cbmltZyB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbn1cblxuLyoqXG4gICAgICogSGlkZSB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gICAgICovXG5zdmc6bm90KDpyb290KSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi8qIEZvcm1zXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICAgICAqL1xuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxMDAlO1xuICAvKiAxICovXG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xuICAvKiAxICovXG4gIG1hcmdpbjogMDtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAgICAgKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAgICAgKi9cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAgICAgKiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UsIEZpcmVmb3gsIGFuZCBJRS5cbiAgICAgKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXG4gICAgICovXG5idXR0b24sXG5zZWxlY3Qge1xuICAvKiAxICovXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vKipcbiAgICAgKiAxLiBQcmV2ZW50IGEgV2ViS2l0IGJ1ZyB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2AgYW5kIGB2aWRlb2BcbiAgICAgKiAgICBjb250cm9scyBpbiBBbmRyb2lkIDQuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmJ1dHRvbixcbmh0bWwgW3R5cGU9XCJidXR0b25cIl0sXG5bdHlwZT1cInJlc2V0XCJdLFxuW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMiAqL1xufVxuXG5idXR0b24sXG5bdHlwZT1cImJ1dHRvblwiXSxcblt0eXBlPVwicmVzZXRcIl0sXG5bdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC8qKlxuICAgICAgICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAgICAgICAqL1xuICAvKipcbiAgICAgICAqIFJlc3RvcmUgdGhlIGZvY3VzIHN0eWxlcyB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cbiAgICAgICAqL1xufVxuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cImJ1dHRvblwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwicmVzZXRcIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbn1cblxuYnV0dG9uOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJidXR0b25cIl06LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cInJlc2V0XCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJzdWJtaXRcIl06LW1vei1mb2N1c3Jpbmcge1xuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XG59XG5cbi8qKlxuICAgICAqIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gICAgICovXG5pbnB1dCB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBJRSAxMC0uXG4gICAgICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLS5cbiAgICAgKi9cblt0eXBlPVwiY2hlY2tib3hcIl0sXG5bdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAyICovXG59XG5cbi8qKlxuICAgICAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cbiAgICAgKi9cblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87XG59XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxuICAgICAqL1xuW3R5cGU9XCJzZWFyY2hcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbiAgLyogMSAqL1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcbiAgLyogMiAqL1xuICAvKipcbiAgICAgICAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gICAgICAgKi9cbn1cblxuW3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sIFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICAgICAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cbiAgICAgKi9cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovXG59XG5cbi8qKlxuICAgICAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAgICAgKi9cbmZpZWxkc2V0IHtcbiAgcGFkZGluZzogMC4zNWVtIDAuNzVlbSAwLjYyNWVtO1xufVxuXG4vKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cbiAgICAgKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gICAgICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5sZWdlbmQge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAvKiAxICovXG4gIGRpc3BsYXk6IHRhYmxlO1xuICAvKiAxICovXG4gIG1heC13aWR0aDogMTAwJTtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAzICovXG4gIGNvbG9yOiBpbmhlcml0O1xuICAvKiAyICovXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gIC8qIDEgKi9cbn1cblxuLyoqXG4gICAgICogMS4gQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICogMi4gQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAgICAgKi9cbnByb2dyZXNzIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAvKiAxICovXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAgICAgKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFLlxuICAgICAqL1xudGV4dGFyZWEge1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLyogSW50ZXJhY3RpdmVcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSwgYW5kIEZpcmVmb3guXG4gICAgICovXG5kZXRhaWxzIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuc3VtbWFyeSB7XG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcbn1cblxuLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cbm1lbnUge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyogU2NyaXB0aW5nXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuY2FudmFzIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cbiAgICAgKi9cbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyogSGlkZGVuXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLS5cbiAgICAgKi9cbltoaWRkZW5dIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuaHRtbCxcbmJvZHkge1xuICBmb250LWZhbWlseTogdmFyKC0tZmFtaWx5LW5vcm1hbCk7XG4gIGZvbnQtd2VpZ2h0OiB2YXIoLS13ZWlnaHQtbm9ybWFsKTtcbiAgbGluZS1oZWlnaHQ6IHZhcigtLWxpbmUtaGVpZ2h0LTIpO1xuICBmb250LXNpemU6IHZhcigtLXNpemUtNSk7XG59XG5cbmh0bWwge1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmb250LXNpemU6IDYyLjUlO1xufVxuXG5oMSxcbmgyLFxuaDMsXG5oNCxcbmg1LFxuaDYge1xuICBmb250LWZhbWlseTogdmFyKC0tZmFtaWx5LWhlYWRpbmcpO1xuICBmb250LXdlaWdodDogdmFyKC0td2VpZ2h0LW1lZGl1bSk7XG4gIG1hcmdpbjogM3JlbSAwIDEuMTI1cmVtO1xufVxuXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogdmFyKC0tc2l6ZS02KTtcbn1cblxuc3Ryb25nLFxuYiB7XG4gIGZvbnQtd2VpZ2h0OiB2YXIoLS13ZWlnaHQtYm9sZCk7XG59XG5cbmJsb2NrcXVvdGUsXG5maWd1cmUsXG51bCxcbm9sLFxucCB7XG4gIG1hcmdpbjogMS4xMjVyZW0gMDtcbn1cblxuaHIge1xuICBiYWNrZ3JvdW5kOiBjdXJyZW50Q29sb3I7XG4gIG1hcmdpbjogMS43NXJlbSAwO1xuICBoZWlnaHQ6IDFweDtcbiAgYm9yZGVyOiBub25lO1xufVxuXG46OnNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnkpO1xuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1pbnZlcnQpO1xufVxuXG5pbWcge1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbn1cblxuYmxvY2txdW90ZSB7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi5jb2x1bW4ge1xuICAtLWNvbHVtbi13aWR0aDogYXV0bztcbiAgLS1jb2x1bW4tZmxleDogMCAwIDA7XG59XG5cbi5jb2x1bW4uaXMtbmFycm93IHtcbiAgLS1jb2x1bW4tZmxleDogbm9uZTtcbn1cblxuLmNvbHVtbi5pcy10aHJlZS1xdWFydGVycyB7XG4gIC0tY29sdW1uLXdpZHRoOiA3NSU7XG4gIC0tY29sdW1uLWZsZXg6IG5vbmU7XG59XG5cbi5jb2x1bW4uaXMtdHdvLXRoaXJkcyB7XG4gIC0tY29sdW1uLXdpZHRoOiA2Ni42NjY2NyU7XG4gIC0tY29sdW1uLWZsZXg6IG5vbmU7XG59XG5cbi5jb2x1bW4uaXMtaGFsZiB7XG4gIC0tY29sdW1uLXdpZHRoOiA1MCU7XG4gIC0tY29sdW1uLWZsZXg6IG5vbmU7XG59XG5cbi5jb2x1bW4uaXMtb25lLXRoaXJkIHtcbiAgLS1jb2x1bW4td2lkdGg6IDMzLjMzMzMzJTtcbiAgLS1jb2x1bW4tZmxleDogbm9uZTtcbn1cblxuLmNvbHVtbi5pcy1vbmUtcXVhcnRlciB7XG4gIC0tY29sdW1uLXdpZHRoOiAyNSU7XG4gIC0tY29sdW1uLWZsZXg6IG5vbmU7XG59XG5cbi5jb2x1bW4uaXMtZm91ci1maWZ0aHMge1xuICAtLWNvbHVtbi13aWR0aDogODAlO1xuICAtLWNvbHVtbi1mbGV4OiBub25lO1xufVxuXG4uY29sdW1uLmlzLXRocmVlLWZpZnRocyB7XG4gIC0tY29sdW1uLXdpZHRoOiA2MCU7XG4gIC0tY29sdW1uLWZsZXg6IG5vbmU7XG59XG5cbi5jb2x1bW4uaXMtdHdvLWZpZnRocyB7XG4gIC0tY29sdW1uLXdpZHRoOiA0MCU7XG4gIC0tY29sdW1uLWZsZXg6IG5vbmU7XG59XG5cbi5jb2x1bW4uaXMtb25lLWZpZnRoIHtcbiAgLS1jb2x1bW4td2lkdGg6IDIwJTtcbiAgLS1jb2x1bW4tZmxleDogbm9uZTtcbn1cblxuLmNvbHVtbi5pcy1mdWxsd2lkdGgge1xuICAtLWNvbHVtbi13aWR0aDogMTAwJTtcbiAgLS1jb2x1bW4tZmxleDogbm9uZTtcbn1cblxuLmNvbHVtbiB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogdmFyKC0tY29sdW1uLXdpZHRoKTtcbiAgZmxleDogdmFyKC0tY29sdW1uLWZsZXgpO1xufVxuXG4uY29sdW1ucyB7XG4gIC0tY29sdW1ucy1nYXA6IDBweDtcbiAgLS1jb2x1bW5zLWdhcC1ob3Jpem9udGFsOiB2YXIoLS1jb2x1bW5zLWdhcCk7XG4gIC0tY29sdW1ucy1nYXAtdmVydGljYWw6IHZhcigtLWNvbHVtbnMtZ2FwKTtcbn1cblxuLmNvbHVtbnMge1xuICBtYXJnaW4tbGVmdDogY2FsYygtMSAqIHZhcigtLWNvbHVtbnMtZ2FwLWhvcml6b250YWwpKTtcbiAgbWFyZ2luLXRvcDogY2FsYygtMSAqIHZhcigtLWNvbHVtbnMtZ2FwLXZlcnRpY2FsKSk7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5jb2x1bW5zID4gLmNvbHVtbjpub3QoOmVtcHR5KSB7XG4gIHBhZGRpbmctbGVmdDogdmFyKC0tY29sdW1ucy1nYXAtaG9yaXpvbnRhbCk7XG4gIHBhZGRpbmctdG9wOiB2YXIoLS1jb2x1bW5zLWdhcC12ZXJ0aWNhbCk7XG59XG5cbi5jb2x1bW5zLmlzLW11bHRpbGluZSB7XG4gIGZsZXgtd3JhcDogd3JhcDtcbn1cblxuLmNvbHVtbnMuaXMtaW5saW5lIHtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG59XG5cbi5jb250YWluZXIge1xuICAtLWNvbnRhaW5lci1tYXJnaW4tcmlnaHQ6IGF1dG87XG4gIC0tY29udGFpbmVyLW1hcmdpbi1sZWZ0OiBhdXRvO1xuICAtLWNvbnRhaW5lci1wYWRkaW5nOiAyMHB4O1xuICAtLWNvbnRhaW5lci13aWR0aDogdmFyKC0tY29udGFpbmVyLWxhcmdlc3QpO1xufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNDhlbSkge1xuICAuY29udGFpbmVyIHtcbiAgICAtLWNvbnRhaW5lci1wYWRkaW5nOiA0MHB4O1xuICB9XG59XG5cbi5jb250YWluZXIuaXMtc21hbGwge1xuICAtLWNvbnRhaW5lci13aWR0aDogdmFyKC0tY29udGFpbmVyLXNtYWxsKTtcbn1cblxuLmNvbnRhaW5lci5pcy1ub3JtYWwge1xuICAtLWNvbnRhaW5lci13aWR0aDogdmFyKC0tY29udGFpbmVyLW5vcm1hbCk7XG59XG5cbi5jb250YWluZXIuaXMtbWVkaXVtIHtcbiAgLS1jb250YWluZXItd2lkdGg6IHZhcigtLWNvbnRhaW5lci1tZWRpdW0pO1xufVxuXG4uY29udGFpbmVyLmlzLWxhcmdlIHtcbiAgLS1jb250YWluZXItd2lkdGg6IHZhcigtLWNvbnRhaW5lci1sYXJnZSk7XG59XG5cbi5jb250YWluZXIuaXMtbGVmdCB7XG4gIC0tY29udGFpbmVyLW1hcmdpbi1sZWZ0OiAwcHg7XG59XG5cbi5jb250YWluZXIuaXMtcmlnaHQge1xuICAtLWNvbnRhaW5lci1tYXJnaW4tcmlnaHQ6IDBweDtcbn1cblxuLmNvbnRhaW5lciB7XG4gIG1hcmdpbi1yaWdodDogdmFyKC0tY29udGFpbmVyLW1hcmdpbi1yaWdodCk7XG4gIG1hcmdpbi1sZWZ0OiB2YXIoLS1jb250YWluZXItbWFyZ2luLWxlZnQpO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXgtd2lkdGg6IHZhcigtLWNvbnRhaW5lci13aWR0aCk7XG59XG5cbi5jb250YWluZXI6bm90KC5pcy1jb2xsYXBzZWQpIHtcbiAgcGFkZGluZy1yaWdodDogdmFyKC0tY29udGFpbmVyLXBhZGRpbmcpO1xuICBwYWRkaW5nLWxlZnQ6IHZhcigtLWNvbnRhaW5lci1wYWRkaW5nKTtcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG59XG5cbi5tZWRpYSB7XG4gIC0tbWVkaWEtcG9zaXRpb246IGNlbnRlcjtcbiAgLS1tZWRpYS1oZWlnaHQ6IGF1dG87XG4gIC0tbWVkaWEtd2lkdGg6IDEwMCU7XG4gIC0tbWVkaWEtc2l6ZTogZmlsbDtcbn1cblxuLm1lZGlhLmlzLXZlcnRpY2FsIHtcbiAgLS1tZWRpYS1oZWlnaHQ6IDEwMCU7XG4gIC0tbWVkaWEtd2lkdGg6IGF1dG87XG59XG5cbi5tZWRpYS5pcy1jb250YWluIHtcbiAgLS1tZWRpYS1zaXplOiBjb250YWluO1xufVxuXG4ubWVkaWEuaXMtY292ZXIge1xuICAtLW1lZGlhLXNpemU6IGNvdmVyO1xufVxuXG4ubWVkaWEuaXMtY29udGFpbiwgLm1lZGlhLmlzLWNvdmVyIHtcbiAgLS1tZWRpYS1oZWlnaHQ6IDEwMCU7XG4gIC0tbWVkaWEtd2lkdGg6IDEwMCU7XG59XG5cbi5tZWRpYSB7XG4gIGhlaWdodDogdmFyKC0tbWVkaWEtaGVpZ2h0KTtcbiAgd2lkdGg6IHZhcigtLW1lZGlhLXdpZHRoKTtcbn1cblxuLm1lZGlhIHBpY3R1cmUsXG4ubWVkaWEgdmlkZW8sXG4ubWVkaWEgaW1nIHtcbiAgb2JqZWN0LXBvc2l0aW9uOiB2YXIoLS1tZWRpYS1wb3NpdGlvbik7XG4gIG9iamVjdC1maXQ6IHZhcigtLW1lZGlhLXNpemUpO1xuICBtYXgtaGVpZ2h0OiAxMDAlO1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBoZWlnaHQ6IHZhcigtLW1lZGlhLWhlaWdodCk7XG4gIHdpZHRoOiB2YXIoLS1tZWRpYS13aWR0aCk7XG59XG5cbi5pcy1vdmVyZmxvdy1oaWRkZW4ge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4uaXMtbWFyZ2lubGVzcyB7XG4gIG1hcmdpbjogMDtcbn1cblxuLmlzLWNhcGl0YWxpemVkIHtcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG59XG5cbi5pcy1sb3dlcmNhc2Uge1xuICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xufVxuXG4uaXMtdXBwZXJjYXNlIHtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cblxuLmlzLWl0YWxpYyB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cblxuLmhhcy10ZXh0LWxlZnQge1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xufVxuXG4uaGFzLXRleHQtcmlnaHQge1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn1cblxuLmhhcy10ZXh0LWNlbnRlcmVkIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4uaGFzLXRleHQtanVzdGlmaWVkIHtcbiAgdGV4dC1hbGlnbjoganVzdGlmeTtcbn1cblxuLmlzLXNpemUtaDEge1xuICBsaW5lLWhlaWdodDogdmFyKC0tbGluZS1oZWlnaHQtMSkgIWltcG9ydGFudDtcbiAgZm9udC13ZWlnaHQ6IHZhcigtLXdlaWdodC1tZWRpdW0pICFpbXBvcnRhbnQ7XG4gIGZvbnQtc2l6ZTogdmFyKC0tc2l6ZS0yKSAhaW1wb3J0YW50O1xufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNDhlbSkge1xuICAuaXMtc2l6ZS1oMSB7XG4gICAgZm9udC1zaXplOiB2YXIoLS1zaXplLTEpICFpbXBvcnRhbnQ7XG4gIH1cbn1cblxuLmlzLXNpemUtaDIge1xuICBsaW5lLWhlaWdodDogdmFyKC0tbGluZS1oZWlnaHQtMSkgIWltcG9ydGFudDtcbiAgZm9udC13ZWlnaHQ6IHZhcigtLXdlaWdodC1tZWRpdW0pICFpbXBvcnRhbnQ7XG4gIGZvbnQtc2l6ZTogdmFyKC0tc2l6ZS0zKSAhaW1wb3J0YW50O1xufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNDhlbSkge1xuICAuaXMtc2l6ZS1oMiB7XG4gICAgZm9udC1zaXplOiB2YXIoLS1zaXplLTIpICFpbXBvcnRhbnQ7XG4gIH1cbn1cblxuLmlzLXNpemUtaDMge1xuICBsaW5lLWhlaWdodDogdmFyKC0tbGluZS1oZWlnaHQtMSkgIWltcG9ydGFudDtcbiAgZm9udC13ZWlnaHQ6IHZhcigtLXdlaWdodC1tZWRpdW0pICFpbXBvcnRhbnQ7XG4gIGZvbnQtc2l6ZTogdmFyKC0tc2l6ZS00KSAhaW1wb3J0YW50O1xufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNDhlbSkge1xuICAuaXMtc2l6ZS1oMyB7XG4gICAgZm9udC1zaXplOiB2YXIoLS1zaXplLTMpICFpbXBvcnRhbnQ7XG4gIH1cbn1cblxuLmlzLXNpemUtbm9ybWFsIHtcbiAgbGluZS1oZWlnaHQ6IHZhcigtLWxpbmUtaGVpZ2h0LTIpICFpbXBvcnRhbnQ7XG4gIGZvbnQtd2VpZ2h0OiB2YXIoLS13ZWlnaHQtbm9ybWFsKSAhaW1wb3J0YW50O1xuICBmb250LXNpemU6IHZhcigtLXNpemUtNSkgIWltcG9ydGFudDtcbn1cblxuLmlzLXNpemUtc21hbGwge1xuICBsaW5lLWhlaWdodDogdmFyKC0tbGluZS1oZWlnaHQtMikgIWltcG9ydGFudDtcbiAgZm9udC13ZWlnaHQ6IHZhcigtLXdlaWdodC1ub3JtYWwpICFpbXBvcnRhbnQ7XG4gIGZvbnQtc2l6ZTogdmFyKC0tc2l6ZS02KSAhaW1wb3J0YW50O1xufVxuXG4uaGFzLXRleHQtcHJpbWFyeSB7XG4gIGNvbG9yOiAjMzRmMmQ2ICFpbXBvcnRhbnQ7XG59XG5cbi5oYXMtdGV4dC1wcmltYXJ5LWludmVydCB7XG4gIGNvbG9yOiAjMDAwMDAwICFpbXBvcnRhbnQ7XG59XG5cbi5oYXMtdGV4dC1kYXJrIHtcbiAgY29sb3I6ICMwMDAwMDAgIWltcG9ydGFudDtcbn1cblxuLmhhcy10ZXh0LWdyYXkge1xuICBjb2xvcjogIzY2NjY2NiAhaW1wb3J0YW50O1xufVxuXG4uaGFzLXRleHQtbGlnaHQge1xuICBjb2xvcjogI2ZmZmZmZiAhaW1wb3J0YW50O1xufVxuXG4uaGFzLXRleHQtdGhpbiB7XG4gIGZvbnQtd2VpZ2h0OiAzMDAgIWltcG9ydGFudDtcbn1cblxuLmhhcy10ZXh0LW5vcm1hbCB7XG4gIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDtcbn1cblxuLmhhcy10ZXh0LW1lZGl1bSB7XG4gIGZvbnQtd2VpZ2h0OiA1MDAgIWltcG9ydGFudDtcbn1cblxuLmhhcy10ZXh0LWJvbGQge1xuICBmb250LXdlaWdodDogNzAwICFpbXBvcnRhbnQ7XG59XG4iLCJodG1sLFxuYm9keSB7XG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1mYW1pbHktbm9ybWFsKTtcbiAgZm9udC13ZWlnaHQ6IHZhcigtLXdlaWdodC1ub3JtYWwpO1xuICBsaW5lLWhlaWdodDogdmFyKC0tbGluZS1oZWlnaHQtMik7XG4gIGZvbnQtc2l6ZTogdmFyKC0tc2l6ZS01KTtcbn1cblxuaHRtbCB7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOyAvLyBUaGlzIG5lZWRzIHRvIGNvbWUgYWZ0ZXIgLXdlYmtpdC1mb250LXNtb290aGluZ1xuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGZvbnQtc2l6ZTogKCRiYXNlLWZvbnQtc2l6ZSAvICRicm93c2VyLWZvbnQtc2l6ZSkgKiAxMDAlO1xufVxuXG4vLyAqLFxuLy8gKjo6YmVmb3JlLFxuLy8gKjo6YWZ0ZXIge1xuLy8gICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuLy8gfVxuXG5oMSxcclxuaDIsXHJcbmgzLFxyXG5oNCxcclxuaDUsXHJcbmg2IHtcclxuICBmb250LWZhbWlseTogdmFyKC0tZmFtaWx5LWhlYWRpbmcpO1xyXG4gIGZvbnQtd2VpZ2h0OiB2YXIoLS13ZWlnaHQtbWVkaXVtKTtcclxuICBtYXJnaW46IDNyZW0gMCAxLjEyNXJlbTtcclxufVxyXG5cclxuc21hbGwge1xyXG4gIGZvbnQtc2l6ZTogdmFyKC0tc2l6ZS02KTtcclxufVxyXG5cclxuc3Ryb25nLFxyXG5iIHtcclxuICBmb250LXdlaWdodDogdmFyKC0td2VpZ2h0LWJvbGQpO1xyXG59XHJcblxyXG5ibG9ja3F1b3RlLFxyXG5maWd1cmUsXHJcbnVsLFxyXG5vbCxcclxucCB7XHJcbiAgbWFyZ2luOiAxLjEyNXJlbSAwO1xyXG59XHJcblxyXG5ociB7XHJcbiAgYmFja2dyb3VuZDogY3VycmVudENvbG9yO1xyXG4gIG1hcmdpbjogMS43NXJlbSAwO1xyXG4gIGhlaWdodDogMXB4O1xyXG4gIGJvcmRlcjogbm9uZTtcclxufVxyXG5cclxuOjpzZWxlY3Rpb24ge1xyXG4gIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnkpO1xyXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWludmVydCk7XHJcbn1cclxuXHJcbmltZyB7XHJcbiAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogYXV0bztcclxufVxyXG5cclxuYmxvY2txdW90ZSB7XHJcbiAgcGFkZGluZzogMDtcclxufVxyXG4iLCIkb3B0aW9uczogKFxuICB0aHJlZS1xdWFydGVyczogMyAvIDQgKiAxMDAlLFxuICB0d28tdGhpcmRzOiAyIC8gMyAqIDEwMCUsXG4gIGhhbGY6IDEgLyAyICogMTAwJSxcbiAgb25lLXRoaXJkOiAxIC8gMyAqIDEwMCUsXG4gIG9uZS1xdWFydGVyOiAxIC8gNCAqIDEwMCUsXG4gIGZvdXItZmlmdGhzOiA0IC8gNSAqIDEwMCUsXG4gIHRocmVlLWZpZnRoczogMyAvIDUgKiAxMDAlLFxuICB0d28tZmlmdGhzOiAyIC8gNSAqIDEwMCUsXG4gIG9uZS1maWZ0aDogMSAvIDUgKiAxMDAlLFxuICBmdWxsd2lkdGg6IDEwMCVcbik7XG5cbi8vIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggMTIge1xuLy8gICAkb3B0aW9ucyA6IG1hcC1tZXJnZSgkb3B0aW9ucywgKFxuLy8gICAgICN7JGl9OiAkaSAvIDEyICogMTAwJVxuLy8gICApKTtcbi8vIH1cblxuLmNvbHVtbiB7XHJcbiAgLS1jb2x1bW4td2lkdGg6IGF1dG87XHJcbiAgLS1jb2x1bW4tZmxleDogMCAwIDA7XG5cbiAgJi5pcy1uYXJyb3cge1xuICAgIC0tY29sdW1uLWZsZXg6IG5vbmU7XG4gIH1cblxuICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJG9wdGlvbnMge1xuICAgICYuaXMtI3ska2V5fSB7XG4gICAgICAtLWNvbHVtbi13aWR0aDogI3skdmFsdWV9O1xuICAgICAgLS1jb2x1bW4tZmxleDogbm9uZTtcbiAgICB9XG4gIH1cbn1cclxuXHJcbi5jb2x1bW4ge1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgd2lkdGg6IHZhcigtLWNvbHVtbi13aWR0aCk7XHJcbiAgZmxleDogdmFyKC0tY29sdW1uLWZsZXgpO1xyXG59XHJcbiIsIi5jb2x1bW5zIHtcclxuICAtLWNvbHVtbnMtZ2FwOiAwcHg7XHJcbiAgLS1jb2x1bW5zLWdhcC1ob3Jpem9udGFsOiB2YXIoLS1jb2x1bW5zLWdhcCk7XHJcbiAgLS1jb2x1bW5zLWdhcC12ZXJ0aWNhbDogdmFyKC0tY29sdW1ucy1nYXApO1xuXHJcbiAgLy8gLS1jb2x1bW5zLXNlcGFyYXRvci1jb2xvcjogY3VycmVudENvbG9yO1xyXG4gIC8vIC0tY29sdW1ucy1zZXBhcmF0b3Itc3Ryb2tlOiAxcHg7XHJcbiAgLy8gLS1jb2x1bW5zLXNlcGFyYXRvci1zdHJva2UtaG9yaXpvbnRhbDogdmFyKC0tY29sdW1ucy1zZXBhcmF0b3Itc3Ryb2tlKTtcclxuICAvLyAtLWNvbHVtbnMtc2VwYXJhdG9yLXN0cm9rZS12ZXJ0aWNhbDogdmFyKC0tY29sdW1ucy1zZXBhcmF0b3Itc3Ryb2tlKTtcclxuICAvLyAtLWNvbHVtbnMtc2VwYXJhdG9yLW9mZnNldDogMHB4O1xyXG4gIC8vIC0tY29sdW1ucy1zZXBhcmF0b3Itb2Zmc2V0LWhvcml6b250YWw6IHZhcigtLWNvbHVtbnMtc2VwYXJhdG9yLW9mZnNldCk7XHJcbiAgLy8gLS1jb2x1bW5zLXNlcGFyYXRvci1vZmZzZXQtdmVydGljYWw6IHZhcigtLWNvbHVtbnMtc2VwYXJhdG9yLW9mZnNldCk7XHJcbn1cclxuXHJcbi5jb2x1bW5zIHtcclxuICBtYXJnaW4tbGVmdDogY2FsYygtMSAqIHZhcigtLWNvbHVtbnMtZ2FwLWhvcml6b250YWwpKTtcclxuICBtYXJnaW4tdG9wOiBjYWxjKC0xICogdmFyKC0tY29sdW1ucy1nYXAtdmVydGljYWwpKTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG5cclxuICA+IC5jb2x1bW46bm90KDplbXB0eSkge1xyXG4gICAgcGFkZGluZy1sZWZ0OiB2YXIoLS1jb2x1bW5zLWdhcC1ob3Jpem9udGFsKTtcclxuICAgIHBhZGRpbmctdG9wOiB2YXIoLS1jb2x1bW5zLWdhcC12ZXJ0aWNhbCk7XHJcbiAgfVxyXG5cclxuICAmLmlzLW11bHRpbGluZSB7XHJcbiAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgfVxyXG5cclxuICAmLmlzLWlubGluZSB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICB9XHJcblxyXG4gIC8vICYuaGFzLXNlcGFyYXRvciB7XHJcbiAgLy8gICA+IC5jb2x1bW4ge1xyXG4gIC8vICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgLy9cclxuICAvLyAgICAgJjo6YmVmb3JlLFxyXG4gIC8vICAgICAmOjphZnRlciB7XHJcbiAgLy8gICAgICAgY29udGVudDogJyc7XHJcbiAgLy8gICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sdW1ucy1zZXBhcmF0b3ItY29sb3IpO1xyXG4gIC8vICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAvLyAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAvLyAgICAgfVxyXG4gIC8vXHJcbiAgLy8gICAgICY6OmJlZm9yZSB7XHJcbiAgLy8gICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xyXG4gIC8vICAgICAgIGhlaWdodDogY2FsYygxMDAlIC0gdmFyKC0tY29sdW1ucy1nYXAtdmVydGljYWwpIC0gdmFyKC0tY29sdW1ucy1zZXBhcmF0b3Itb2Zmc2V0LXZlcnRpY2FsKSAqIDIpO1xyXG4gIC8vICAgICAgIHdpZHRoOiB2YXIoLS1jb2x1bW5zLXNlcGFyYXRvci1zdHJva2UtdmVydGljYWwpO1xyXG4gIC8vICAgICAgIGxlZnQ6IGNhbGModmFyKC0tY29sdW1ucy1nYXAtaG9yaXpvbnRhbCkgLyAyKTtcclxuICAvLyAgICAgICB0b3A6IGNhbGModmFyKC0tY29sdW1ucy1nYXAtdmVydGljYWwpICsgdmFyKC0tY29sdW1ucy1zZXBhcmF0b3Itb2Zmc2V0LXZlcnRpY2FsKSk7XHJcbiAgLy8gICAgIH1cclxuICAvL1xyXG4gIC8vICAgICAmOjphZnRlciB7XHJcbiAgLy8gICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG4gIC8vICAgICAgIGhlaWdodDogdmFyKC0tY29sdW1ucy1zZXBhcmF0b3Itc3Ryb2tlLWhvcml6b250YWwpO1xyXG4gIC8vICAgICAgIHdpZHRoOiBjYWxjKDEwMCUgLSB2YXIoLS1jb2x1bW5zLWdhcC1ob3Jpem9udGFsKSAtIHZhcigtLWNvbHVtbnMtc2VwYXJhdG9yLW9mZnNldC1ob3Jpem9udGFsKSAqIDIpO1xyXG4gIC8vICAgICAgIGxlZnQ6IGNhbGModmFyKC0tY29sdW1ucy1nYXAtaG9yaXpvbnRhbCkgKyB2YXIoLS1jb2x1bW5zLXNlcGFyYXRvci1vZmZzZXQtaG9yaXpvbnRhbCkpO1xyXG4gIC8vICAgICAgIHRvcDogY2FsYyh2YXIoLS1jb2x1bW5zLWdhcC12ZXJ0aWNhbCkgLyAyKTtcclxuICAvLyAgICAgfVxyXG4gIC8vICAgfVxyXG4gIC8vIH1cclxufVxyXG4iLCIuY29udGFpbmVyIHtcclxuICAtLWNvbnRhaW5lci1tYXJnaW4tcmlnaHQ6IGF1dG87XG4gIC0tY29udGFpbmVyLW1hcmdpbi1sZWZ0OiBhdXRvO1xuICAtLWNvbnRhaW5lci1wYWRkaW5nOiAyMHB4O1xuICAtLWNvbnRhaW5lci13aWR0aDogdmFyKC0tY29udGFpbmVyLWxhcmdlc3QpO1xuXG4gIEBpbmNsdWRlIGJyZWFrcG9pbnQobWVkaXVtKSB7XG4gICAgLS1jb250YWluZXItcGFkZGluZzogNDBweDtcbiAgfVxuXG4gIEBlYWNoICRrZXksICR2YWx1ZSBpbiBnZXQoY29udGFpbmVyKSB7XG4gICAgQGlmIG5vdCgka2V5ID09IGxhcmdlc3QpIHtcbiAgICAgICYuaXMtI3ska2V5fSB7XG4gICAgICAgIC0tY29udGFpbmVyLXdpZHRoOiB2YXIoLS1jb250YWluZXItI3ska2V5fSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgJi5pcy1sZWZ0IHtcbiAgICAtLWNvbnRhaW5lci1tYXJnaW4tbGVmdDogMHB4O1xuICB9XG5cbiAgJi5pcy1yaWdodCB7XG4gICAgLS1jb250YWluZXItbWFyZ2luLXJpZ2h0OiAwcHg7XG4gIH1cclxufVxyXG5cclxuLmNvbnRhaW5lciB7XHJcbiAgbWFyZ2luLXJpZ2h0OiB2YXIoLS1jb250YWluZXItbWFyZ2luLXJpZ2h0KTtcclxuICBtYXJnaW4tbGVmdDogdmFyKC0tY29udGFpbmVyLW1hcmdpbi1sZWZ0KTtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gIG1heC13aWR0aDogdmFyKC0tY29udGFpbmVyLXdpZHRoKTtcclxuXHJcbiAgJjpub3QoLmlzLWNvbGxhcHNlZCkge1xyXG4gICAgcGFkZGluZy1yaWdodDogdmFyKC0tY29udGFpbmVyLXBhZGRpbmcpO1xyXG4gICAgcGFkZGluZy1sZWZ0OiB2YXIoLS1jb250YWluZXItcGFkZGluZyk7XHJcbiAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgfVxufVxyXG4iLCIvLy8gUGFyc2UgdGhlIHZhbHVlLlxuLy8vXG4vLy8gQHBhcmFtIHtNaXhlZH0gJHZhbHVlIC0gRWl0aGVyIGEgbnVtYmVyIG9yIHJlZ2lzdGVyZWQgYnJlYWtwb2ludC5cbi8vLyBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBwYXJzZWQgaW5wdXQuXG5cclxuQGZ1bmN0aW9uIHBhcnNlLWJyZWFrcG9pbnQoJHZhbHVlKSB7XHJcbiAgQGlmIHR5cGUtb2YoJHZhbHVlKSA9PSBzdHJpbmcge1xyXG4gICAgJHZhbHVlOiBnZXQoYnJlYWtwb2ludCwgJHZhbHVlKTtcclxuICB9XG5cbiAgQHJldHVybiBlbSgkdmFsdWUpO1xyXG59XG5cblxuLy8vIE1lZGlhIHF1ZXJ5IGZyb20gdGhpcyBicmVha3BvaW50LlxuLy8vXG4vLy8gQHBhcmFtIHtNaXhlZH0gJG1pbi13aWR0aCAtIFN0YXJ0aW5nIGJyZWFrcG9pbnQuXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZWRpYS10eXBlIC0gQ2hvc2VuIG1lZGlhIHR5cGUuXG5cclxuQG1peGluIGJyZWFrcG9pbnQoJG1pbi13aWR0aCwgJG1lZGlhLXR5cGU6IGFsbCkge1xyXG4gIEBpbmNsdWRlIHJlc3BvbmQtdG8oJG1pbi13aWR0aCwgMHB4LCAkbWVkaWEtdHlwZSkge1xyXG4gICAgQGNvbnRlbnQ7XHJcbiAgfVxyXG59XG5cclxuXHJcbi8vLyBNZWRpYSBxdWVyeSB1bnRpbCB0aGlzIGJyZWFrcG9pbnQuXG4vLy9cbi8vLyBAcGFyYW0ge01peGVkfSAkbWF4LXdpZHRoIC0gRW5kaW5nIGJyZWFrcG9pbnQuXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZWRpYS10eXBlIC0gQ2hvc2VuIG1lZGlhIHR5cGUuXG5cbkBtaXhpbiBicmVha3BvaW50LXVudGlsKCRtYXgtd2lkdGgsICRtZWRpYS10eXBlOiBhbGwpIHtcclxuICBAaW5jbHVkZSByZXNwb25kLXRvKDBweCwgJG1heC13aWR0aCwgJG1lZGlhLXR5cGUpIHtcclxuICAgIEBjb250ZW50O1xyXG4gIH1cclxufVxuXHJcblxyXG4vLy8gTWVkaWEgcXVlcnkgYmV0d2VlbiB0d28gYnJlYWtwb2ludHMuXG4vLy9cbi8vLyBAcGFyYW0ge01peGVkfSAkbWluLXdpZHRoIC0gU3RhcnRpbmcgYnJlYWtwb2ludC5cbi8vLyBAcGFyYW0ge01peGVkfSAkbWF4LXdpZHRoIC0gRW5kaW5nIGJyZWFrcG9pbnQuXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZWRpYS10eXBlIC0gQ2hvc2VuIG1lZGlhIHR5cGUuXG5cbkBtaXhpbiBicmVha3BvaW50LWJldHdlZW4oJG1pbi13aWR0aCwgJG1heC13aWR0aCwgJG1lZGlhLXR5cGU6IGFsbCkge1xyXG4gIEBpbmNsdWRlIHJlc3BvbmQtdG8oJG1pbi13aWR0aCwgJG1heC13aWR0aCwgJG1lZGlhLXR5cGUpIHtcclxuICAgIEBjb250ZW50O1xyXG4gIH1cclxufVxyXG5cblxyXG4vLy8gTWVkaWEgcXVlcnkgaGVscGVyLlxuLy8vXG4vLy8gQHBhcmFtIHtNaXhlZH0gJG1pbi13aWR0aCAtIFN0YXJ0aW5nIGJyZWFrcG9pbnQuXG4vLy8gQHBhcmFtIHtNaXhlZH0gJG1heC13aWR0aCAtIEVuZGluZyBicmVha3BvaW50LlxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkbWVkaWEtdHlwZSAtIENob3NlbiBtZWRpYSB0eXBlLlxuXHJcbkBtaXhpbiByZXNwb25kLXRvKCRtaW4td2lkdGgsICRtYXgtd2lkdGgsICRtZWRpYS10eXBlOiBhbGwpIHtcclxuICAkbWluLXdpZHRoOiBwYXJzZS1icmVha3BvaW50KCRtaW4td2lkdGgpO1xyXG4gICRtYXgtd2lkdGg6IHBhcnNlLWJyZWFrcG9pbnQoJG1heC13aWR0aCk7XHJcbiAgJG1lZGlhLXF1ZXJ5OiAnJztcclxuXHJcbiAgLy8gb3V0cHV0IHJ1bGVzIGluc2lkZSBAbWVkaWEgcXVlcmllc1xyXG4gIEBpZiBzdHJpcC11bml0KCRtaW4td2lkdGgpICE9IDAge1xuICAgICRtZWRpYS1xdWVyeTogJyN7JG1lZGlhLXF1ZXJ5fSBhbmQgKG1pbi13aWR0aDogI3skbWluLXdpZHRofSknO1xyXG4gIH1cclxuXHJcbiAgQGlmIHN0cmlwLXVuaXQoJG1heC13aWR0aCkgIT0gMCB7XHJcbiAgICAvLyBpZGVhbGx5IHdlIHdvdWxkIHVzZSBtZWRpYSBxdWVyaWVzIGxldmVsIDQgKHdpZHRoIDwgI3skbWF4LXdpZHRofSkgaGVyZVxuICAgICRtZWRpYS1xdWVyeTogJyN7JG1lZGlhLXF1ZXJ5fSBhbmQgKG1heC13aWR0aDogI3soJG1heC13aWR0aCAtIDAuMDFlbSl9KSc7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgdW5uZWNlc3NhcnkgbWVkaWEgcXVlcnkgcHJlZml4ICdhbGwgYW5kICdcclxuICBAaWYgKCRtZWRpYS10eXBlID09IGFsbCBhbmQgJG1lZGlhLXF1ZXJ5ICE9ICcnKSB7XHJcbiAgICAkbWVkaWEtcXVlcnk6IHN0ci1zbGljZSh1bnF1b3RlKCRtZWRpYS1xdWVyeSksIDYpO1xyXG4gICAgJG1lZGlhLXR5cGU6ICcnO1xyXG4gIH1cclxuXHJcbiAgLy8gb3V0cHV0IEBtZWRpYSBxdWVyeVxyXG4gIEBtZWRpYSAjeyRtZWRpYS10eXBlICsgJG1lZGlhLXF1ZXJ5fSB7XHJcbiAgICBAY29udGVudDtcclxuICB9XHJcbn1cclxuIiwiLm1lZGlhIHtcbiAgLS1tZWRpYS1wb3NpdGlvbjogY2VudGVyO1xuICAtLW1lZGlhLWhlaWdodDogYXV0bztcbiAgLS1tZWRpYS13aWR0aDogMTAwJTtcbiAgLS1tZWRpYS1zaXplOiBmaWxsO1xuXG4gICYuaXMtdmVydGljYWwge1xuICAgIC0tbWVkaWEtaGVpZ2h0OiAxMDAlO1xuICAgIC0tbWVkaWEtd2lkdGg6IGF1dG87XG4gIH1cblxuICAmLmlzLWNvbnRhaW4ge1xuICAgIC0tbWVkaWEtc2l6ZTogY29udGFpbjtcbiAgfVxuXG4gICYuaXMtY292ZXIge1xuICAgIC0tbWVkaWEtc2l6ZTogY292ZXI7XG4gIH1cblxuICAmLmlzLWNvbnRhaW4sXG4gICYuaXMtY292ZXIge1xuICAgIC0tbWVkaWEtaGVpZ2h0OiAxMDAlO1xuICAgIC0tbWVkaWEtd2lkdGg6IDEwMCU7XG4gIH1cbn1cblxuLm1lZGlhIHtcbiAgLy8gYmFja2dyb3VuZC1wb3NpdGlvbjogdmFyKC0tbWVkaWEtcG9zaXRpb24pO1xuICAvLyBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAvLyBiYWNrZ3JvdW5kLWltYWdlOiB2YXIoLS1tZWRpYS1zb3VyY2UpO1xuICAvLyBiYWNrZ3JvdW5kLXNpemU6IHZhcigtLW1lZGlhLXNpemUpO1xuXG4gIGhlaWdodDogdmFyKC0tbWVkaWEtaGVpZ2h0KTtcbiAgd2lkdGg6IHZhcigtLW1lZGlhLXdpZHRoKTtcblxuICBwaWN0dXJlLFxuICB2aWRlbyxcbiAgaW1nIHtcbiAgICBvYmplY3QtcG9zaXRpb246IHZhcigtLW1lZGlhLXBvc2l0aW9uKTtcbiAgICBvYmplY3QtZml0OiB2YXIoLS1tZWRpYS1zaXplKTtcbiAgICBtYXgtaGVpZ2h0OiAxMDAlO1xuXHQgIG1heC13aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBoZWlnaHQ6IHZhcigtLW1lZGlhLWhlaWdodCk7XG4gICAgd2lkdGg6IHZhcigtLW1lZGlhLXdpZHRoKTtcbiAgfVxufVxuIiwiLmlzLW92ZXJmbG93LWhpZGRlbiB7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxufVxyXG5cclxuLmlzLW1hcmdpbmxlc3Mge1xyXG4gIG1hcmdpbjogMDtcclxufVxyXG4iLCIuaXMtY2FwaXRhbGl6ZWQge1xyXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xyXG59XHJcblxyXG4uaXMtbG93ZXJjYXNlIHtcclxuICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xyXG59XHJcblxyXG4uaXMtdXBwZXJjYXNlIHtcclxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG59XHJcblxyXG4uaXMtaXRhbGljIHtcclxuICBmb250LXN0eWxlOiBpdGFsaWM7XHJcbn1cclxuXHJcbi5oYXMtdGV4dC1sZWZ0IHtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG59XHJcblxyXG4uaGFzLXRleHQtcmlnaHQge1xyXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xyXG59XHJcblxyXG4uaGFzLXRleHQtY2VudGVyZWQge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLmhhcy10ZXh0LWp1c3RpZmllZCB7XHJcbiAgdGV4dC1hbGlnbjoganVzdGlmeTtcclxufVxyXG5cclxuQGVhY2ggJGtleSwgJHZhbHVlIGluIGdldCh0ZXh0KSB7XHJcbiAgLmlzLXNpemUtI3ska2V5fSB7XG4gICAgQGluY2x1ZGUgcHJvcGVydGllcygkdmFsdWUsICFpbXBvcnRhbnQpXHJcbiAgfVxyXG59XHJcblxuQGVhY2ggJGtleSwgJHZhbHVlIGluIGdldChjb2xvcikge1xuICAuaGFzLXRleHQtI3ska2V5fSB7XG4gICAgY29sb3I6ICR2YWx1ZSAhaW1wb3J0YW50O1xuICB9XG59XG5cclxuQGVhY2ggJGtleSwgJHZhbHVlIGluIGdldCh3ZWlnaHQpIHtcclxuICAuaGFzLXRleHQtI3ska2V5fSB7XHJcbiAgICBmb250LXdlaWdodDogJHZhbHVlICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG59XHJcbiIsIi8vLyBHZW5lcmF0ZSByZXNwb25zaXZlIHByb3BlcnRpZXMuXG4vLy9cbi8vLyBAcGFyYW0ge0FyZ0xpc3R9ICRhcmdzIC0gRWl0aGVyIGEgbWFwIG9mIHByb3BlcnRpZXMgb3IgYSBrZXkgdmFsdWUgcGFpci5cbi8vLyBAcGFyYW0ge01peGVkfSAkYXR0ciAtIEFkZHMgdGhlICRhdHRyIHRvIGV2ZXJ5IHByb3BlcnR5IChlLmcuICFpbXBvcnRhbnQpLlxuLy8vXG4vLy8gQGV4YW1wbGVcbi8vLyAuaXMtc2l6ZS1oMSB7XG4vLy8gICBAaW5jbHVkZSBwcm9wZXJ0aWVzKChcbi8vLyAgICAgbGluZS1oZWlnaHQ6IDEuMjUsXG4vLy8gICAgIGZvbnQtc2l6ZTogKFxuLy8vICAgICAgIG5vcm1hbDogMjBweCxcbi8vLyAgICAgICBtZWRpdW06IDMycHgsXG4vLy8gICAgICAgMTUwMHB4OiA2MHB4XG4vLy8gICAgIClcbi8vLyAgICkpXG4vLy9cbi8vLyBhbHRlcm5hdGl2ZWx5IHlvdSBjb3VsZCB1c2UgdGhlIG1peGluXG4vLy8gbGlrZSB0aGlzIGRlcGVuZGluZyBvbiB5b3VyIHByb3BlcnRpZXNcbi8vLyB5b3UgYWN0dWFsbHkgbmVlZCB0byBzZXRcbi8vL1xuLy8vICAgQGluY2x1ZGUgcHJvcGVydGllcyhmb250LXNpemUsIChcbi8vLyAgICAgbm9ybWFsOiAyMHB4LFxuLy8vICAgICBtZWRpdW06IDMycHgsXG4vLy8gICAgIDE1MDBweDogNjBweFxuLy8vICAgKSlcbi8vLyB9XG4vLy9cbi8vLyAuaXMtc2l6ZS1oMSB7XG4vLy8gICBsaW5lLWhlaWdodDogMS4yNTtcbi8vLyAgIGZvbnQtc2l6ZTogMjBweDtcbi8vLyB9XG4vLy9cbi8vLyBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcbi8vLyAgIC5pcy1zaXplLWgxIHtcbi8vLyAgICAgZm9udC1zaXplOiAzMnB4O1xuLy8vICAgfVxuLy8vIH1cbi8vL1xuLy8vIEBtZWRpYSAobWluLXdpZHRoOiAxNTAwcHgpIHtcbi8vLyAgIC5pcy1zaXplLWgxIHtcbi8vLyAgICAgZm9udC1zaXplOiA2MHB4O1xuLy8vICAgfVxuLy8vIH1cblxuQG1peGluIHByb3BlcnRpZXMoJGFyZ3MuLi4vKiwgJGF0dHIgKi8pIHtcbiAgJGNhY2hlOiAoKTtcbiAgJGF0dHI6ICgpO1xuICAkZGF0YTogbnRoKCRhcmdzLCAxKTtcblxuICAvLyBub3JtYWxpemUgZGF0YVxuICBAaWYgdHlwZS1vZigkZGF0YSkgPT0gc3RyaW5nIHtcbiAgICAkZGF0YTogKCRkYXRhOiBudGgoJGFyZ3MsIDIpKTtcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIHRoZSB2YWx1ZXMgc2hvdWxkIGJlIGltcG9ydGFudFxuICBAaWYgKG50aCgkYXJncywgLTEpID09ICFpbXBvcnRhbnQpIHtcbiAgICAkYXR0cjogYXBwZW5kKCRhdHRyLCAhaW1wb3J0YW50KTtcbiAgfVxuXG4gIEBlYWNoICRwcm9wZXJ0eSwgJHZhbHVlcyBpbiAkZGF0YSB7XG5cbiAgICAvLyBub3JtYWxpemUgdmFsdWVzXG4gICAgQGlmIG5vdCh0eXBlLW9mKCR2YWx1ZXMpID09IG1hcCkge1xuICAgICAgJHZhbHVlczogKG5vcm1hbDogJHZhbHVlcyk7XG4gICAgfVxuXG4gICAgQGVhY2ggJGtleSwgJHZhbHVlIGluICR2YWx1ZXMge1xuXG4gICAgICAvLyBncm91cCAkcHJvcGVydHk6ICR2YWx1ZSBieSBicmVha3BvaW50XG4gICAgICBAaWYgbm90KCRrZXkgPT0gbm9ybWFsKSB7XG4gICAgICAgICRjYWNoZTogbWFwLWV4dGVuZCgkY2FjaGUsICgka2V5OiAoJHByb3BlcnR5OiAkdmFsdWUpKSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGp1c3Qgb3V0cHV0IHRoZSAkcHJvcGVydHk6ICR2YWx1ZVxuICAgICAgQGVsc2Uge1xuICAgICAgICAjeyRwcm9wZXJ0eX06ICgkdmFsdWUgJGF0dHIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG91dHB1dCBhbGwgcHJvcGVydGllcyBncm91cGVkIGJ5IGJyZWFrcG9pbnRcbiAgQGVhY2ggJGtleSwgJHZhbHVlcyBpbiAkY2FjaGUge1xuICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQoJGtleSkge1xuICAgICAgQGVhY2ggJHByb3BlcnR5LCAkdmFsdWUgaW4gJHZhbHVlcyB7XG4gICAgICAgICN7JHByb3BlcnR5fTogKCR2YWx1ZSAkYXR0cik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0= */
